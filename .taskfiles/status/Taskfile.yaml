# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  default: task --list --taskfile "{{.ROOT_DIR}}/.taskfiles/status/Taskfile.yaml"

  cluster-info:
    desc: "Show basic info about the kubernetes cluster"
    silent: true
    cmds:
      - "echo 🏢 Cluster Name: {{.CLUSTER_NAME}}"
      - |
        if {{.PROVIDER_BINARY}} get clusters 2>/dev/null | grep -q "{{.CLUSTER_NAME}}"; then
          kubectl --kubeconfig {{.KUBECONFIG_PATH}} cluster-info
        else
          echo "ℹ️ Cluster {{.CLUSTER_NAME}} does not exist"
        fi

  environment:
    desc: "Show environment configuration details"
    silent: true
    cmds:
      - |
        echo "🌍 Environment Configuration:"
        echo "├── Name: {{.ENV_NAME}}"
        echo "├── Base Directory: {{.BASE_DIR}}"
        echo "├── Local Domain: {{.LOCAL_DOMAIN}}"
        echo "├── Local IP: {{.LOCAL_IP}}"
        echo "├── Container Runtime: {{.RUNTIME}}"
        echo "├── Nodes:"
        echo "│   ├── Control Plane: {{.SERVERS}}"
        echo "│   ├── Workers: {{.WORKERS}}"
        echo "│   └── Control Plane Scheduling: {{.ALLOW_CONTROL_PLANE_SCHEDULING}}"
        echo "└── Service Presets Enabled: {{.USE_SERVICE_PRESETS}}"

  services:
    desc: "Show information about enabled services"
    silent: true
    cmds:
      - |
        echo "🔌 Enabled Services:"
        yq e '.environment.services[] | select(.enabled == true) | "├── " + .name + ": " + (.ports | join(", "))' {{.CONFIG_FILE}}
        echo "└── Registry: {{.REGISTRY_HOST}}"

  dns:
    desc: "Show DNS configuration"
    silent: true
    cmds:
      - |
        echo "🔍 DNS Configuration:"
        echo "├── Container Name: {{.DNS_CONTAINER_NAME}}"
        echo "├── Status: $( {{.RUNTIME_BINARY}} ps --filter name={{.DNS_CONTAINER_NAME}} --format '{{`{{.Status}}`}}' || echo 'Not running' )"
        echo "└── Config File: {{.K8S_DIR}}/config/dnsmasq.conf"
        
        if [ -f "{{.K8S_DIR}}/config/dnsmasq.conf" ]; then
          echo -e "\n📄 DNS Records:"
          grep "address=/" {{.K8S_DIR}}/config/dnsmasq.conf | sed 's/address=\//├── /'
        fi

  storage:
    desc: "Show storage information"
    silent: true
    cmds:
      - |
        echo "💾 Storage Information:"
        echo "├── Base Path: {{.K8S_DIR}}/storage"
        echo "├── Control Plane Storage:"
        for i in $(seq 0 $(expr {{.SERVERS}} - 1)); do
          SIZE=$(du -sh {{.K8S_DIR}}/storage/control-$i 2>/dev/null | cut -f1 || echo "N/A")
          echo "│   ├── control-$i: $SIZE"
        done
        echo "└── Worker Storage:"
        for i in $(seq 0 $(expr {{.WORKERS}} - 1)); do
          SIZE=$(du -sh {{.K8S_DIR}}/storage/worker-$i 2>/dev/null | cut -f1 || echo "N/A")
          echo "    ├── worker-$i: $SIZE"
        done

  certificates:
    desc: "Show certificate information"
    silent: true
    cmds:
      - |
        echo "🔐 Certificate Information:"
        echo "├── CA Path: {{.ROOT_CA_PATH}}"
        echo "├── Certificates Directory: {{.K8S_DIR}}/certs"
        
        # Check for root CA certificate
        if [ -f "{{.K8S_DIR}}/certs/rootCA.pem" ]; then
          echo "├── Root CA Certificate:"
          openssl x509 -in {{.K8S_DIR}}/certs/rootCA.pem -noout -subject -issuer -dates | sed 's/^/│   ├── /'
        fi
        
        # Check for domain certificates
        if [ -f "{{.K8S_DIR}}/certs/dev.me.pem" ]; then
          echo "├── Domain Certificate:"
          openssl x509 -in {{.K8S_DIR}}/certs/dev.me.pem -noout -subject -issuer -dates | sed 's/^/│   ├── /'
        fi
        
        echo "└── cert-manager Status:"
        if {{.PROVIDER_BINARY}} get clusters 2>/dev/null | grep -q "{{.CLUSTER_NAME}}" && test -f {{.KUBECONFIG_PATH}}; then
          # Check if cert-manager is installed
          if kubectl --kubeconfig {{.KUBECONFIG_PATH}} get namespace cert-manager >/dev/null 2>&1; then
            echo "    ├── cert-manager Namespace: Found"
            
            # Check cert-manager pods
            echo "    ├── cert-manager Pods:"
            kubectl --kubeconfig {{.KUBECONFIG_PATH}} get pods -n cert-manager -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,AGE:.metadata.creationTimestamp | tail -n +2 | sed 's/^/    │   ├── /'
            
            # Check ClusterIssuers
            echo "    ├── ClusterIssuers:"
            kubectl --kubeconfig {{.KUBECONFIG_PATH}} get clusterissuers -o custom-columns=NAME:.metadata.name,READY:.status.conditions[0].status,AGE:.metadata.creationTimestamp | tail -n +2 | sed 's/^/    │   ├── /'
            
            # Check for service TLS secrets
            echo "    └── Service TLS Secrets:"
            ENABLED_SERVICES=($(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}} 2>/dev/null || echo ""))
            if [ ${#ENABLED_SERVICES[@]} -gt 0 ]; then
              for SERVICE in "${ENABLED_SERVICES[@]}"; do
                NAMESPACE=$(yq e ".environment.services[] | select(.name == \"$SERVICE\") | .namespace // .name" {{.CONFIG_FILE}})
                if kubectl --kubeconfig {{.KUBECONFIG_PATH}} get secret $SERVICE-tls -n $NAMESPACE >/dev/null 2>&1; then
                  SECRET_AGE=$(kubectl --kubeconfig {{.KUBECONFIG_PATH}} get secret $SERVICE-tls -n $NAMESPACE -o jsonpath='{.metadata.creationTimestamp}')
                  echo "        ├── $SERVICE-tls (namespace: $NAMESPACE, created: $SECRET_AGE)"
                else
                  echo "        ├── $SERVICE-tls (namespace: $NAMESPACE): Not found"
                fi
              done
            else
              echo "        └── No enabled services found"
            fi
          else
            echo "    └── cert-manager not installed"
          fi
        else
          echo "    └── Cluster not available"
        fi

  logs:
    desc: "Show logs information and recent logs"
    silent: true
    cmds:
      - |
        echo "📝 Logs Information:"
        echo "├── Base Path: {{.K8S_DIR}}/logs"
      - task: _show_node_logs
        vars:
          NODE_TYPE: control
          PREFIX: "│"
          TITLE: "Control Plane Logs:"
          COUNT: "{{.SERVERS}}"
      - task: _show_node_logs
        vars:
          NODE_TYPE: worker
          PREFIX: " "
          TITLE: "Worker Logs:"
          COUNT: "{{.WORKERS}}"

  _show_node_logs:
    internal: true
    silent: true
    cmds:
      - |
        echo "{{if eq .NODE_TYPE "control"}}├{{else}}└{{end}}── {{.TITLE}}"
        for i in $(seq 0 $(expr {{.COUNT}} - 1)); do
          LOG_DIR="{{.K8S_DIR}}/logs/{{.NODE_TYPE}}-$i"
          if [ -d "$LOG_DIR" ]; then
            SIZE=$(du -sh "$LOG_DIR" 2>/dev/null | cut -f1 || echo "N/A")
            echo "{{.PREFIX}}   ├── {{.NODE_TYPE}}-$i:"
            echo "{{.PREFIX}}   │   ├── Size: $SIZE"
            # Check containers directory
            if [ -d "$LOG_DIR/containers" ] && [ -n "$(ls -A $LOG_DIR/containers 2>/dev/null)" ]; then
              echo "{{.PREFIX}}   │   ├── Container Logs:"
              ls -t "$LOG_DIR/containers" | head -n 3 | sed 's/^/{{.PREFIX}}   │   │   ├── /'
            fi
            # Check pods directory
            if [ -d "$LOG_DIR/pods" ] && [ -n "$(ls -A $LOG_DIR/pods 2>/dev/null)" ]; then
              echo "{{.PREFIX}}   │   └── Pod Logs:"
              ls -t "$LOG_DIR/pods" | head -n 3 | sed 's/^/{{.PREFIX}}   │       ├── /'
            else
              echo "{{.PREFIX}}   │   └── No logs present"
            fi
          fi
        done

  all:
    desc: "Show all environment information"
    silent: true
    cmds:
      - task: environment
      - echo ""
      - task: cluster-info
      - echo ""
      - task: services
      - echo ""
      - task: dns
      - echo ""
      - task: storage
      - echo ""
      - task: logs
      - echo ""
      - task: certificates
