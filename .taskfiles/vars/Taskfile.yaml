# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

output: prefixed
vars:
  CONFIG_FILE: "{{.ROOT_DIR}}/k8s-env.yaml"
  BASE_DIR:
    sh: yq e '.environment.base-dir' {{.CONFIG_FILE}}
  ENV_NAME:
    sh: yq e '.environment.name' {{.CONFIG_FILE}}
  USE_SERVICE_PRESETS:
    sh: yq e '.environment.use-service-presets' {{.CONFIG_FILE}}
  CLUSTER_NAME: "{{.ENV_NAME}}"
  VENV: "{{.ROOT_DIR}}/.venv"
  K8S_DIR: "{{.BASE_DIR}}/{{.CLUSTER_NAME}}"
  LOCAL_DOMAIN:
    sh: yq e '.environment.local-domain' {{.CONFIG_FILE}}
  LOCAL_IP:
    sh: yq e '.environment.local-ip' {{.CONFIG_FILE}}
  REGISTRY_NAME:
    sh: yq e '.environment.registry.name' {{.CONFIG_FILE}}
  SERVERS:
    sh: yq e '.environment.nodes.servers' {{.CONFIG_FILE}}
  WORKERS:
    sh: yq e '.environment.nodes.workers' {{.CONFIG_FILE}}
  ALLOW_CONTROL_PLANE_SCHEDULING:
    sh: yq e '.environment.nodes["allow-scheduling-on-control-plane"] // false' {{.CONFIG_FILE}}
  INTERNAL_COMPONENTS_ON_CONTROL_PLANE:
    sh: yq e '.environment.nodes["internal-components-on-control-plane"] // false' {{.CONFIG_FILE}}
  RUN_SERVICES_ON_WORKERS_ONLY:
    sh: yq e '.environment["run-services-on-workers-only"] // false' {{.CONFIG_FILE}}
  REGISTRY_HOST: "{{.REGISTRY_NAME}}.{{.LOCAL_DOMAIN}}"
  PROVIDER:
    sh: yq e '.environment.provider.name' {{.CONFIG_FILE}}
  PROVIDER_BINARY:
    sh: yq e '.environment.provider.name' {{.CONFIG_FILE}}
  RUNTIME:
    sh: yq e '.environment.provider.runtime' {{.CONFIG_FILE}}
  APP_TEMPLATE_VERSION:
    sh: yq e '.environment.internal-components[] | select(has("app-template")) | .["app-template"]' {{.CONFIG_FILE}}
  DNSMASQ_VERSION:
    sh: yq e '.environment.internal-components[] | select(has("dnsmasq")) | .dnsmasq' {{.CONFIG_FILE}}
  RUNTIME_BINARY:
    sh: |
      if [ "{{.RUNTIME}}" = "podman" ]; then
        echo "podman"
      else
        echo "docker"
      fi
  CONTAINER_NETWORK_NAME:
    sh: echo "kind"
  DNS_CONTAINER_NAME:
    sh: echo "{{.CLUSTER_NAME}}-dns"
  KIND_LB_CONTAINER_NAME:
    sh: echo "{{.CLUSTER_NAME}}-external-load-balancer"
  ROOT_CA_PATH:
    sh: |
      if command -v mkcert >/dev/null 2>&1; then
        mkcert -CAROOT
      else
        echo "Error: mkcert is not installed. Please install mkcert to proceed." >&2
        exit 1
      fi
  KUBECONFIG_PATH: "{{.K8S_DIR}}/kubeconfig"
  TEST_DIR: "{{.ROOT_DIR}}/tests"
  REG_TEST_DIR: "{{.TEST_DIR}}/registry"
  CR_TEST_IMAGE_TAG:
    sh: |
      cd {{.ROOT_DIR}}/tests/registry && (cat ep.sh Dockerfile; date +%s) | sha256sum | cut -c1-8
  OS: '{{OS}}'
  ENABLED_SERVICES:
    sh: |
      yq e '.environment.services[] | select(.enabled == true) | .name + ":" + (.ports[] | tostring)' {{.CONFIG_FILE}} | paste -sd " " -
  NGINX_INGRESS_VERSION:
    sh: yq e '.environment.internal-components[] | select(has("nginx-ingress")) | .["nginx-ingress"]' {{.CONFIG_FILE}}
  ROOT_DIR: '{{.ROOT_DIR}}'
  DNS_PORT:
    sh: yq e '.environment.dns.port // "53"' {{.CONFIG_FILE}}

  # Certificate-related vars
  CERT_FILE: "{{.K8S_DIR}}/certs/{{.LOCAL_DOMAIN}}.pem"
  KEY_FILE: "{{.K8S_DIR}}/certs/{{.LOCAL_DOMAIN}}-key.pem"
  COMBINED_FILE: "{{.K8S_DIR}}/certs/{{.LOCAL_DOMAIN}}-combined.pem"
  CERT_DIR: "{{.K8S_DIR}}/certs"
  CONTAINERD_CERT_DIR: "{{.K8S_DIR}}/config/containerd/certs.d/{{.REGISTRY_NAME}}.{{.LOCAL_DOMAIN}}"

  # DNS-related vars
  RESOLVER_DIR: /etc/resolver
  RESOLVER_FILE: /etc/resolver/{{.LOCAL_DOMAIN}}

  # Kubeconfig vars
  KUBECONFIG: "{{.K8S_DIR}}/kubeconfig"

tasks:
  default: echo "The vars taskfile contains only variable definitions"
