{"version": 2, "width": 230, "height": 50, "timestamp": 1738873327, "env": {"SHELL": "/bin/zsh", "TERM": "xterm-256color"}}
[0.17414166666666667,"o","\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                                                    \r \r"]
[0.4976866666666666,"o","\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b[0m\u001b[49m\u001b[39m\u001b[0m\u001b[48;5;238m\u001b[38;5;255m \u001b[0m\u001b[38;5;255m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;255m \u001b[0m\u001b[38;5;255m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;246m\u001b[0m\u001b[38;5;246m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m  \u001b[1m\u001b[38;5;31m\u001b[48;5;238m\u001b[38;5;39m~\u001b[0m\u001b[38;5;39m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m/Code/\u001b[1m\u001b[38;5;31m\u001b[48;5;238m\u001b[38;5;39mlocal-env\u001b[0m\u001b[38;5;39m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m\u001b[0m\u001b[38;5;31m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m \u001b[0m\u001b[38;5;31m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;246m\u001b[0m\u001b[38;5;246m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;178m \u001b[0m\u001b[38;5;178m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;76m\u001b[0m\u001b[38;5;76m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;178m \u001b[38;5;76m main \u001b[38;5;76m⇡1 \u001b[38;5;178m!2\u001b[0m\u001b[38;5;178m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;178m \u001b[0m\u001b[38;5;178m\u001b[48;5;238m\u001b[49m\u001b[38;5;238m\u001b[0m\u001b[38;5;238m\u001b[49m\u001b[39m \u001b[0m\u001b[49m\u001b[39m"]
[0.4977108333333333,"o","\u001b[K\u001b[160C\u001b[0m\u001b[49m\u001b[38;5;238m\u001b[0m\u001b[38;5;238m\u001b[48;5;238m\u001b[38;5;70m \u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;70m✔\u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;70m \u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;70m\u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m\u001b[38;5;246m\u001b[0m\u001b[38;5;246m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m local-env\u001b[0m\u001b[38;5;37m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m \u001b[0m\u001b[38;5;37m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m \u001b[0m\u001b[38;5;37m\u001b[48;5;238m\u001b[49m\u001b[39m\u001b[178D"]
[0.4978241666666666,"o","\u001b[?2004h"]
[0.5681831666666667,"o","task create-env && task validate-env "]
[0.5693328333333333,"o","\u001b[37D\u001b[32mt\u001b[32ma\u001b[32ms\u001b[32mk\u001b[39m\u001b[15C\u001b[32mt\u001b[32ma\u001b[32ms\u001b[32mk\u001b[39m\u001b[14C"]
[0.6004731666666666,"o","\u001b[?2004l\r\r\n"]
[0.6428765,"o","[\u001b[33mcheck-deps\u001b[0m] 🔄 Checking dependencies...\r\n"]
[0.6441223333333332,"o","[\u001b[33mcheck-deps\u001b[0m]   ⚙️ Installing mise tools...\r\n"]
[0.6502196666666666,"o","[\u001b[33mcheck-deps\u001b[0m] mise all runtimes are installed\r\n"]
[0.6574466666666665,"o","[\u001b[33mcheck-deps\u001b[0m]   ⚙️ Installing Python dependencies...\r\n"]
[0.6596451666666666,"o","[\u001b[33mcheck-deps\u001b[0m] ✅ All dependencies installed\r\n"]
[0.6618535,"o","[\u001b[34mgenerate-dirs\u001b[0m] 🔄 Creating directories...\r\n"]
[0.6631928333333332,"o","[\u001b[34m"]
[0.6632121666666666,"o","generate-dirs\u001b[0m]   📁 Creating control plane directories...\r\n"]
[0.665934,"o","[\u001b[34mgenerate-dirs\u001b[0m]   📁 Creating worker node directories...\r\n"]
[0.6721421666666667,"o","[\u001b[34mgenerate-dirs\u001b[0m] ✅ Directories created\r\n"]
[0.6747335,"o","[\u001b[35mgenerate-configs\u001b[0m] 🔄 Generating configuration files...\r\n"]
[0.7148266666666667,"o","Password:"]
[0.9106981666666667,"o","\r\n"]
[0.9583116666666665,"o","[\u001b[35mgenerate-configs\u001b[0m] 📝 Generating configurations from .k8s-env.yaml\r\n[\u001b[35mgenerate-configs\u001b[0m] 📝 Generating helmfile.yaml\r\n"]
[0.9583198333333333,"o","[\u001b[35mgenerate-configs\u001b[0m] ✅ Created /Users/devuser/demo/.local/my-cluster/config/helmfile.yaml\r\n[\u001b[35mgenerate-configs\u001b[0m] 📝 Generating containerd.yaml\r\n[\u001b[35mgenerate-configs\u001b[0m] ✅ Created /Users/devuser/demo/.local/my-cluster/config/containerd.yaml\r\n[\u001b[35mgenerate-configs\u001b[0m] 📝 Generating dnsmasq.conf\r\n[\u001b[35mgenerate-configs\u001b[0m] ✅ Created /Users/devuser/demo/.local/my-cluster/config/dnsmasq.conf\r\n[\u001b[35mgenerate-configs\u001b[0m] 📝 Generating cluster.yaml\r\n[\u001b[35mgenerate-configs\u001b[0m] ✅ Created /Users/devuser/demo/.local/my-cluster/config/cluster.yaml\r\n"]
[0.9583218333333333,"o","[\u001b[35mgenerate-configs\u001b[0m] "]
[0.9583234999999999,"o","🔧 Setting up DNS resolver for dev.me...\r\n[\u001b[35mgenerate-configs\u001b[0m] ✅ Resolver file created at /etc/resolver/dev.me\r\n"]
[0.9583251666666666,"o","[\u001b[35mgenerate-configs\u001b[0m] ✨ Configuration generation complete!\r\n"]
[1.0463158333333333,"o","[\u001b[35mgenerate-configs\u001b[0m] ✅ Configuration files generated\r\n"]
[1.0486554999999997,"o","[\u001b[36msetup-certificates\u001b[0m] 🔄 Setting up certificates...\r\n"]
[1.0499521666666667,"o","[\u001b[36msetup-certificates\u001b[0m]   🔐 Generating certificates using mkcert...\r\n"]
[1.0610085,"o","[\u001b[36msetup-certificates\u001b[0m] The local CA is already installed in the system trust store! 👍\r\n"]
[1.0655196666666666,"o","[\u001b[36msetup-certificates\u001b[0m] The local CA is already installed in the Firefox trust store! 👍\r\n[\u001b[36msetup-certificates\u001b[0m] \r\n"]
[1.0881584999999998,"o","[\u001b[36msetup-certificates\u001b[0m] \r\n[\u001b[36msetup-certificates\u001b[0m] Created a new certificate valid for the following names 📜\r\n[\u001b[36m"]
[1.0881698333333334,"o","setup-certificates\u001b[0m]  - \"*.dev.me\"\r\n[\u001b[36msetup-certificates\u001b[0m]  - \"dev.me\"\r\n[\u001b[36msetup-certificates\u001b[0m]  - \"*.192.168.1.100\"\r\n[\u001b[36msetup-certificates\u001b[0m]  - \"192.168.1.100\"\r\n[\u001b[36msetup-certificates\u001b[0m] \r\n[\u001b[36msetup-certificates\u001b[0m] Reminder: X.509 wildcards only go one level deep, so this won't match a.b.dev.me ℹ️\r\n[\u001b[36msetup-certificates\u001b[0m] \r\n[\u001b[36msetup-certificates\u001b[0m] The certificate is at \"/Users/devuser/demo/.local/my-cluster/certs/dev.me.pem\" and the key at \"/Users/devuser/demo/.local/my-cluster/certs/dev.me-key.pem\" ✅\r\n"]
[1.0881913333333333,"o","[\u001b[36msetup-certificates\u001b[0m] \r\n[\u001b[36msetup-certificates\u001b[0m] It will expire on 6 May 2027 🗓\r\n[\u001b[36msetup-certificates\u001b[0m] \r\n"]
[1.0918131666666664,"o","[\u001b[36msetup-certificates\u001b[0m] Certificates set up successfully\r\n"]
[1.0933291666666667,"o","[\u001b[36msetup-certificates\u001b[0m]   📁 Setting up containerd registry certificates...\r\n"]
[1.0961723333333333,"o","[\u001b[36msetup-certificates\u001b[0m] ✅ Certificates setup complete\r\n"]
[1.0993331666666666,"o","[\u001b[32mstart-dnsmasq\u001b[0m] 🔄 Starting DNS service...\r\n"]
[1.1050391666666666,"o","[\u001b[32mstart-dnsmasq\u001b[0m]   🚀 Starting dnsmasq container...\r\n"]
[1.1657603333333333,"o","[\u001b[32mstart-dnsmasq\u001b[0m] 04c7b98bb5392e330c441423b146641f390740ab875941b56a63c09ce0f02b74\r\n"]
[1.2058773333333335,"o","[\u001b[32mstart-dnsmasq\u001b[0m] ✅ DNS service ready\r\n"]
[1.2184276666666665,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m] 🔄 Creating KinD cluster 'my-cluster'...\r\n"]
[1.2397356666666666,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m] Creating cluster \"my-cluster\" ...\r\n["]
[1.239756833333333,"o","\u001b[31mkubernetes:create-cluster\u001b[0m]  • Ensuring node image (kindest/node:v1.32.1) 🖼  ...\r\n"]
[1.24807,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  ✓ Ensuring node image (kindest/node:v1.32.1) 🖼\r\n[\u001b[31mkubernetes:create-cluster\u001b[0m]  • Preparing nodes 📦 📦   ...\r\n"]
[1.3699443333333332,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  ✓ Preparing nodes 📦 📦 \r\n"]
[1.3830176666666665,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  • Writing configuration 📜  ...\r\n"]
[1.4933895000000001,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  ✓ Writing configuration 📜\r\n[\u001b[31mkubernetes:create-cluster\u001b[0m]  • Starting control-plane 🕹️  ...\r\n"]
[2.313660999999999,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  ✓ Starting control-plane 🕹️\r\n[\u001b[31mkubernetes:create-cluster\u001b[0m"]
[2.3136828333333335,"o","]  • Installing CNI 🔌  ...\r\n"]
[2.3903529999999997,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  ✓ Installing CNI 🔌\r\n[\u001b[31mkubernetes:create-cluster\u001b[0m]  • Installing StorageClass 💾  ...\r\n"]
[2.4553495,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  ✓ Installing StorageClass 💾\r\n"]
[2.4721298333333332,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  • Joining worker nodes 🚜  ...\r\n"]
[2.690866833333333,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m]  ✓ Joining worker nodes 🚜\r\n"]
[2.741746333333333,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m] Set kubectl context to \"kind-my-cluster\"\r\n[\u001b[31m"]
[2.741766833333333,"o","kubernetes:create-cluster\u001b[0m] You can now use your cluster with:\r\n[\u001b[31mkubernetes:create-cluster\u001b[0m] \r\n[\u001b[31mkubernetes:create-cluster\u001b[0m] kubectl cluster-info --context kind-my-cluster\r\n[\u001b[31mkubernetes:create-cluster\u001b[0m] \r\n[\u001b[31mkubernetes:create-cluster\u001b[0m] Have a question, bug, or feature request? Let us know! https://kind.sigs.k8s.io/#community 🙂\r\n"]
[2.7433595,"o","[\u001b[31mkubernetes:create-cluster\u001b[0m] ✅ KinD cluster 'my-cluster' created successfully\r\n"]
[2.815242666666667,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] ⏳ Waiting for KinD cluster...\r\n"]
[2.8241261666666664,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] "]
[2.824142833333333,"o","Switched to context \"kind-my-cluster\".\r\n"]
[3.586908333333333,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] node/my-cluster-control-plane condition met\r\n"]
[4.271858,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] node/my-cluster-worker condition met\r\n"]
[4.2721124999999995,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] ✅ Cluster is ready\r\n"]
[4.274684500000001,"o","[\u001b[94mkubernetes:set-control-plane-scheduling\u001b[0m] 🔄 Enabling scheduling on control plane nodes...\r\n"]
[4.287167,"o","[\u001b[94mkubernetes:set-control-plane-scheduling\u001b[0m] node/my-cluster-control-plane untainted\r\n"]
[4.287436,"o","[\u001b[94mkubernetes:set-control-plane-scheduling\u001b[0m] "]
[4.2874425,"o","✅ Scheduling enabled on control plane nodes\r\n"]
[4.301040666666666,"o","[\u001b[95mkubernetes:label-worker-nodes\u001b[0m] 🔄 Labeling worker nodes...\r\n"]
[4.323476833333333,"o","[\u001b[95mkubernetes:label-worker-nodes\u001b[0m] node/my-cluster-worker labeled\r\n"]
[4.3237049999999995,"o","[\u001b[95mkubernetes:label-worker-nodes"]
[4.3237105,"o","\u001b[0m] ✅ Labeled node my-cluster-worker as worker\r\n"]
[4.326657166666667,"o","[\u001b[96mkubernetes:list-nodes\u001b[0m] 🔄 Listing cluster nodes...\r\n"]
[4.3391348333333335,"o","[\u001b[96mkubernetes:list-nodes\u001b[0m] NAME                      STATUS   ROLES           AGE   VERSION\r\n["]
[4.339156333333333,"o","\u001b[96mkubernetes:list-nodes\u001b[0m] my-cluster-control-plane   Ready    control-plane   25s   v1.32.1\r\n[\u001b[96mkubernetes:list-nodes\u001b[0m] my-cluster-worker          Ready    worker          15s   v1.32.1\r\n"]
[4.340858166666666,"o","[\u001b[96mkubernetes:list-nodes\u001b[0m] ✅ Node list complete\r\n"]
[4.354825,"o","[\u001b[92mkubernetes:create-wildcard-cert\u001b[0m] 🔄 Creating wildcard TLS certificate...\r\n"]
[4.366371,"o","[\u001b[92mkubernetes:create-wildcard-cert\u001b[0m] secret/wildcard-tls created\r\n"]
[4.368093666666666,"o","[\u001b[92mkubernetes:create-wildcard-cert\u001b[0m] ✅ Wildcard TLS certificate created\r\n"]
[4.728595999999999,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] 🔄 Deploying core services...\r\n"]
[4.7298893333333325,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m]   📦 Installing/upgrading Helm charts for enabled services...\r\n"]
[4.751427166666666,"o","[\u001b[91m"]
[4.751448833333333,"o","kubernetes:deploy-services\u001b[0m] Adding repo ingress-nginx https://kubernetes.github.io/ingress-nginx\r\n"]
[4.908707333333333,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] \"ingress-nginx\" has been added to your repositories\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[4.908729333333334,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Adding repo bitnami https://charts.bitnami.com/bitnami\r\n"]
[5.668364666666666,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] \"bitnami\" has been added to your repositories\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[5.6683885,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Adding repo bjw-s https://bjw-s.github.io/helm-charts/\r\n"]
[5.9836935,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] \"bjw-s\" has been added to your repositories\r\n[\u001b[91mkubernetes:deploy-services"]
[5.983704166666667,"o","\u001b[0m] \r\n"]
[5.9838086666666666,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Pulling ghcr.io/dragonflydb/dragonfly/helm/dragonfly:v1.26.2\r\n"]
[6.4672625,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^ingress-nginx$\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[6.467268,"o","] Listing releases matching ^postgres$\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^dragonfly$\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^registry$\r\n"]
[6.4798903333333335,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Upgrading release=ingress-nginx, chart=ingress-nginx/ingress-nginx, namespace=ingress-nginx\r\n"]
[7.857326333333333,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Release \"ingress-nginx\" does not exist. Installing it now.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[7.857332833333335,"o","] NAME: ingress-nginx\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] LAST DEPLOYED: Thu Feb  6 21:23:13 2025\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAMESPACE: ingress-nginx\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] STATUS: deployed\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] REVISION: 1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] TEST SUITE: None\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NOTES:\r\n"]
[7.857334666666669,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] The ingress-nginx controller has been installed.\r\n[\u001b[91mkubernetes:deploy-services"]
[7.8573363333333335,"o","\u001b[0m] Get the application URL by running these commands:\r\n"]
[7.857337666666666,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m]   export HTTP_NODE_PORT=$(kubectl get service --namespace ingress-nginx ingress-nginx-controller --output jsonpath=\"{.spec.ports[0].nodePort}\")\r\n"]
[7.857339166666667,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m]   export HTTPS_NODE_PORT=$(kubectl get service --namespace ingress-nginx ingress-nginx-controller --output jsonpath=\"{.spec.ports[1].nodePort}\")\r\n"]
[7.857340833333333,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[7.857342333333333,"o","]   export NODE_IP=\"$(kubectl get nodes --output jsonpath=\"{.items[0].status.addresses[1].address}\")\"\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[7.857343499999999,"o","] \r\n[\u001b[91mkubernetes:deploy-services"]
[7.857344999999999,"o","\u001b[0m]   echo \"Visit http://${NODE_IP}:${HTTP_NODE_PORT} to access your application via HTTP.\"\r\n[\u001b[91m"]
[7.857346333333333,"o","kubernetes:deploy-services\u001b[0m]   echo \"Visit https://${NODE_IP}:${HTTPS_NODE_PORT} to access your application via HTTPS.\"\r\n["]
[7.857433,"o","\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] An example Ingress that makes use of the controller:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   apiVersion: networking.k8s.io/v1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   kind: Ingress\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   metadata:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     name: example\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     namespace: foo\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   spec:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     ingressClassName: nginx\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     rules:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]       - host: www.example.com\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]         http:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]           paths:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]             - pathType: Prefix\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]               backend:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                 service:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                   name"]
[7.857447499999999,"o",": exampleService\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                   port:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                     number: 80\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]               path: /\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     # This section is only required if TLS is to be enabled for the Ingress\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     tls:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]       - hosts:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]         - www.example.com\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]         secretName: example-tls\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   apiVersion: v1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   kind: Secret\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   metadata:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     name: example-tls\r\n[\u001b[91mkubernetes"]
[7.857460500000002,"o",":deploy-services\u001b[0m]     namespace: foo\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   data:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     tls.crt: <base64 encoded cert>\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     tls.key: <base64 encoded key>\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   type: kubernetes.io/tls\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^ingress-nginx$\r\n"]
[7.8693546666666645,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] ingress-nginx\tingress-nginx\t1       \t2025-02-06 21:23:13.182031 +0100 CET\tdeployed\tingress-nginx-4.12.0\t1.12.0     \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] "]
[7.869368833333333,"o","\r\n"]
[7.869788166666667,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Upgrading release=registry, chart=bjw-s/app-template, namespace=registry\r\n"]
[9.05472066666667,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Release \"registry\" does not exist. Installing it now.\r\n["]
[9.054839833333332,"o","\u001b[91mkubernetes:deploy-services\u001b[0m] NAME: registry\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] LAST DEPLOYED: Thu Feb  6 21:24:50 2025\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAMESPACE: registry\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] STATUS: deployed\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] REVISION: 1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] TEST SUITE: None\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^registry$\r\n"]
[9.066914999999996,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] registry\tregistry \t1       \t2025-02-06 21:24:50.511222 +0100 CET\tdeployed\tapp-template-3.6.1\t           \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[9.0673455,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Upgrading release=postgres, chart=bitnami/postgresql, namespace=postgres\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Upgrading release=dragonfly, chart=/var/folders/zf/1qdbnv1x48z5fdwqjlklkj2c0000gn/T/helmfile2616077620/dragonfly/dragonfly/dragonfly/v1.26.2/dragonfly, namespace=dragonfly\r\n"]
[10.793288833333332,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Release \"dragonfly\" does not exist. Installing it now.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAME: dragonfly\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] LAST DEPLOYED: Thu Feb  6 21:25:07 2025\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAMESPACE: dragonfly\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] "]
[10.793295333333331,"o","STATUS: deployed\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] REVISION: 1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] TEST SUITE: None\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NOTES:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] 1. Get the application URL by running these commands:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   export POD_NAME=$(kubectl get pods --namespace dragonfly -l \"app.kubernetes.io/name=dragonfly,app.kubernetes.io/instance=dragonfly\" -o jsonpath=\"{.items[0].metadata.name}\")\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] "]
[10.793330999999998,"o","  export CONTAINER_PORT=$(kubectl get pod --namespace dragonfly $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   echo \"You can use redis-cli to connect against localhost:6379\"\r\n["]
[10.793336499999999,"o","\u001b[91mkubernetes:deploy-services\u001b[0m]   kubectl --namespace dragonfly port-forward $POD_NAME 6379:$CONTAINER_PORT\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^dragonfly$\r\n"]
[10.80440083333333,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] dragonfly\tdragonfly\t1       \t2025-02-06 21:25:07.00725 +0100 CET\tdeployed\tdragonfly-v1.26.2\tv1.26.2    \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[11.438146833333333,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Release \"postgres\" does not exist. Installing it now.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[11.438153499999999,"o","] NAME: postgres\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] LAST DEPLOYED: Thu Feb  6 21:25:12 2025\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAMESPACE: postgres\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] STATUS: deployed\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] REVISION: 1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] TEST SUITE: None\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NOTES:\r\n["]
[11.438155500000004,"o","\u001b[91mkubernetes:deploy-services\u001b[0m] CHART NAME: postgresql\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[11.438157166666667,"o","] CHART VERSION: 16.4.6\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] "]
[11.438159000000004,"o","APP VERSION: 17.2.0\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[11.4381605,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] "]
[11.438183999999994,"o","Did you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendors/bitnami for more information.\r\n[\u001b[91mkubernetes:deploy-services"]
[11.43821616666667,"o","\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] ** Please be patient while the chart is being deployed **\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] PostgreSQL can be accessed via port 5432 on the following DNS names from within your cluster:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     postgres.postgres.svc.cluster.local - Read/Write connection\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] To get the password for \"postgres\" run:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     export POSTGRES_PASSWORD=$(kubectl get secret --namespace postgres postgres -o jsonpath=\"{.data.postgres-password}\" | base64 -d)\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] To connect to your database run the following command:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     kubectl run postgres-client --rm --tty -i --restart='Nev"]
[11.438222500000007,"o","er' --namespace postgres --image docker.io/bitnami/postgresql:17.2.0-debian-12-r10 --env=\"PGPASSWORD=$POSTGRES_PASSWORD\" \\\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]       --command -- psql --host postgres -U postgres -d postgres -p 5432\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     > NOTE: If you access the container using bash, make sure that you execute \"/opt/bitnami/scripts/postgresql/entrypoint.sh /bin/bash\" in order to avoid the error \"psql: local user with ID 1001} does not exist\"\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] To connect to your database from outside the cluster execute the following commands:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     kubectl port-forward --namespace postgres svc/postgres 5432:5432 &\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     PGPASSWORD=\"$POSTGRES_PASSWORD\" psql --host 127.0.0.1 -U postgres -d postgres -p 5432\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernet"]
[11.438237166666658,"o","es:deploy-services\u001b[0m] WARNING: The configured password will be ignored on new installation in case when previous PostgreSQL release was deleted through the helm command. In that case, old PVC will have an old password, and setting it through helm won't take effect. Deleting persistent volumes (PVs) will solve the issue.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] WARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\r\n[\u001b[91m"]
[11.438252166666667,"o","kubernetes:deploy-services\u001b[0m]   - primary.resources\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   - readReplicas.resources\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] +info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^postgres$\r\n"]
[11.449723333333328,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] postgres\tpostgres \t1       \t2025-02-06 21:25:12.666801 +0100 CET\tdeployed\tpostgresql-16.4.6\t17.2.0     \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[11.449931,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n["]
[11.449951333333328,"o","\u001b[91mkubernetes:deploy-services\u001b[0m] UPDATED RELEASES:\r\n"]
[11.449963333333326,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] NAME            NAMESPACE       CHART                                                VERSION   DURATION\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] ingress-nginx   ingress-nginx   ingress-nginx/ingress-nginx                          4.12.0       1m33s\r\n[\u001b[91m"]
[11.449975500000008,"o","kubernetes:deploy-services\u001b[0m] registry        registry        bjw-s/app-template                                   3.6.1          22s\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] dragonfly       dragonfly       oci://ghcr.io/dragonflydb/dragonfly/helm/dragonfly   v1.26.2        40s\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] postgres        postgres        bitnami/postgresql                                   16.4.6       1m24s\r\n[\u001b[91m"]
[11.449987333333333,"o","kubernetes:deploy-services\u001b[0m] \r\n"]
[11.452490333333333,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] ✅ Core services deployed successfully\r\n"]
[11.454775833333333,"o","[\u001b[33mkubernetes:fetch-service-secrets\u001b[0m] 🔄 Fetching service secrets...\r\n"]
[11.477557166666667,"o","[\u001b[33mkubernetes:fetch-service-secrets\u001b[0m] 🔑 Passwords for enabled password-protected services have been written to /Users/devuser/demo/.local/my-cluster/service-secrets.txt\r\n["]
[11.477577166666665,"o","\u001b[33mkubernetes:fetch-service-secrets\u001b[0m] 🔑 Service secrets:\r\n"]
[11.478181166666667,"o","[\u001b[33mkubernetes:fetch-service-secrets"]
[11.47819999999999,"o","\u001b[0m] Service postgres, Password: 9iCCKyUGHF\r\n"]
[11.479842499999998,"o","[\u001b[33mkubernetes:fetch-service-secrets\u001b[0m] ✅ Service secrets fetched successfully\r\n"]
[11.521357333333336,"o","[\u001b[33mvalidate:tcp-services\u001b[0m] 🔍 Validating enabled TCP services:\r\n"]
[11.525561999999999,"o","[\u001b[33m"]
[11.525582833333333,"o","validate:tcp-services\u001b[0m] 🔄 Validating postgres on port 5432...\r\n"]
[11.528137166666662,"o","[\u001b[33mvalidate:tcp-services\u001b[0m] Connection to postgres.dev.me port 5432 [tcp/postgresql] succeeded!\r\n"]
[11.528222833333329,"o","[\u001b[33mvalidate:tcp-services\u001b[0m] ✅ postgres is reachable on port 5432\r\n"]
[11.530350333333327,"o","[\u001b[33mvalidate:tcp-services\u001b[0m] 🔄 Validating dragonfly on port 6379...\r\n"]
[11.533013666666667,"o","[\u001b[33mvalidate:tcp-services\u001b[0m] Connection to dragonfly.dev.me port 6379 [tcp/*] succeeded!\r\n"]
[11.533098166666665,"o","[\u001b[33mvalidate:tcp-services\u001b[0m] "]
[11.533114166666666,"o","✅ dragonfly is reachable on port 6379\r\n[\u001b[33mvalidate:tcp-services\u001b[0m] ✅✅✅ All services are reachable\r\n"]
[11.559576499999999,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] 🔄 Building and pushing a sample image to local registry...\r\n"]
[11.685442166666666,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #0 building with \"orbstack\" instance using docker driver\r\n"]
[11.685470833333333,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #1 [internal] load build definition from Dockerfile\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #1 transferring dockerfile: 453B done\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #1 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #2 [auth] library/busybox:pull token for registry-1.docker.io\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #2 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #3 [internal] load metadata for docker.io/library/busybox:1.37.0-uclibc\r\n"]
[11.838318166666664,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #3 DONE 1.1s\r\n"]
[11.856905833333332,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #4 [internal] load .dockerignore\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #4 transferring context: 2B done\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] "]
[11.85691266666667,"o","#4 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #5 [1/4] FROM docker.io/library/busybox:1.37.0-uclibc@sha256:f1a295688a1cad4f66e7f45484a882a8b45fbdea28fa0a889ac17146775ad1a2\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #5 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #6 [internal] load build context\r\n"]
[11.856914666666666,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #6 transferring context: 27B done\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] "]
[11.85691616666667,"o","#6 DONE 0.0s\r\n["]
[11.856917833333332,"o","\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n"]
[11.856919833333338,"o","[\u001b[34mvalidate:build-push-local-registry"]
[11.856921166666663,"o","\u001b[0m] #7 [3/4] COPY ./ep.sh /ep.sh\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #7 CACHED\r\n"]
[11.856953333333342,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n"]
[11.856964500000009,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #8 [2/4] RUN mkdir -p /www\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #8 CACHED\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #9 [4/4] RUN chmod +x /ep.sh\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #9 CACHED\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] \r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #10 exporting to image\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #10 exporting layers done\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #10 writing image sha256:417289e5d8ec911a53542f5549bf805483cfe5c5b06a1d7453627c79724f1d5c done\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #10 naming to cr.dev.me/cr-test:7bc4005a done\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] #10 DONE 0.0s\r\n"]
[11.870416333333333,"o","[\u001b[34mvalidate:build-push-local-registry"]
[11.870434666666666,"o","\u001b[0m] The push refers to repository [cr.dev.me/cr-test]\r\n"]
[11.872009833333333,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] 1705ee5400b5: Preparing\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] fa3766cdc445: Preparing\r\n[\u001b[34mvalidate:build-push-local-registry"]
[11.872029666666664,"o","\u001b[0m] c10ffe097875: Preparing\r\n[\u001b[34mvalidate:build-push-local-registry\u001b[0m] 834128d4c634: Preparing\r\n"]
[11.888207166666671,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] fa3766cdc445: Pushed\r\n"]
[11.88902449999999,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] c10ffe097875: Pushed\r\n"]
[11.904311666666667,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] 834128d4c634: Pushed\r\n"]
[12.024073833333341,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] 1705ee5400b5: Pushed\r\n"]
[12.035483666666666,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] 7bc4005a: digest: sha256:923e124d807cce66b43366374179039e08f6f13278fb508abf6e25c8760b8894 size: 1148\r\n"]
[12.037214333333328,"o","[\u001b[34mvalidate:build-push-local-registry\u001b[0m] ✅ Sample image built and pushed successfully\r\n"]
[12.050262499999999,"o","[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] 🔄 Deploying a test Helm release...\r\n"]
[12.075401999999999,"o","[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] "]
[12.075421666666665,"o","Sample values.yaml generated at /Users/devuser/demo/tests/registry/test-values.yaml\r\n"]
[12.089010999999996,"o","[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m"]
[12.089032833333336,"o","] Release \"cr-test\" does not exist. Installing it now.\r\n"]
[13.530428666666667,"o","[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] NAME: cr-test\r\n[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m"]
[13.530438000000009,"o","] LAST DEPLOYED: Thu Feb  6 21:26:41 2025\r\n[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] NAMESPACE: default\r\n[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] STATUS: deployed\r\n[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] REVISION: 1\r\n[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] TEST SUITE: None\r\n"]
[13.534565166666663,"o","[\u001b[35mvalidate:deploy-test-helm-release\u001b[0m] ✅ Test Helm release deployed successfully\r\n"]
[13.5370295,"o","[\u001b[36mvalidate:app\u001b[0m] 🔄 Validating sample application...\r\n"]
[14.374434833333334,"o","[\u001b[36mvalidate:app\u001b[0m] \r\n[\u001b[36mvalidate:app\u001b[0m] 🌐 Registry Test (https://cr-test.dev.me/):\r\n[\u001b[36mvalidate:app\u001b[0m] \r\n"]
[14.380425999999998,"o","[\u001b[36mvalidate:app"]
[14.380432666666666,"o","\u001b[0m] <html><head><title>Local Kubernetes Test</title></head><body><h1>Welcome to your local Kubernetes development environment!</h1><p>This container is running an image from the local container registry hosted inside the kubernetes cluster.</p><p>Pod Name: cr-test-9dcdb897c-kf8qj</p></body></html>\r\n"]
[14.382149999999996,"o","[\u001b[36mvalidate:app\u001b[0m] ✅ Sample application validation complete\r\n"]
[14.382369833333334,"o","\u001b[1m\u001b[7m%\u001b[27m\u001b[1m\u001b[0m                                                                                                                                                                                                                                    \r \r"]
[14.402250499999997,"o","\r\u001b[0m\u001b[27m\u001b[24m\u001b[J\u001b[0m\u001b[49m\u001b[39m\u001b[0m\u001b[48;5;238m\u001b[38;5;255m \u001b[0m\u001b[38;5;255m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;255m \u001b[0m\u001b[38;5;255m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;246m\u001b[0m\u001b[38;5;246m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m  \u001b[1m\u001b[38;5;31m\u001b[48;5;238m\u001b[38;5;39m~\u001b[0m\u001b[38;5;39m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m/Code/\u001b[1m\u001b[38;5;31m\u001b[48;5;238m\u001b[38;5;39mlocal-env\u001b[0m\u001b[38;5;39m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m\u001b[0m\u001b[38;5;31m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;31m \u001b[0m\u001b[38;5;31m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;246m\u001b[0m\u001b[38;5;246m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;178m \u001b[0m\u001b[38;5;178m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;76m\u001b[0m\u001b[38;5;76m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;178m \u001b[38;5;76m main \u001b[38;5;76m⇡1 \u001b[38;5;178m!3\u001b[0m\u001b[38;5;178m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;178m \u001b[0m\u001b[38;5;178m\u001b[48;5;238m\u001b[49m\u001b[38;5;238m\u001b[0m\u001b[38;5;238m\u001b[49m\u001b[39m \u001b[0m\u001b[49m\u001b[39m"]
[14.40226816666667,"o","\u001b[K\u001b[149C\u001b[0m\u001b[49m\u001b[38;5;238m\u001b[0m\u001b[38;5;238m\u001b[48;5;238m\u001b[38;5;70m \u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;70m✔\u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;70m \u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;70m\u001b[0m\u001b[38;5;70m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;248m\u001b[38;5;246m\u001b[0m\u001b[38;5;246m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;248m 4m 48s\u001b[0m\u001b[38;5;248m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;248m \u001b[0m\u001b[38;5;248m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;248m \u001b[0m\u001b[38;5;248m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;248m\u001b[0m\u001b[38;5;248m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m\u001b[38;5;246m\u001b[0m\u001b[38;5;246m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m local-env\u001b[0m\u001b[38;5;37m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m \u001b[0m\u001b[38;5;37m\u001b[48;5;238m\u001b[48;5;238m\u001b[38;5;37m \u001b[0m\u001b[38;5;37m\u001b[48;5;238m\u001b[49m\u001b[39m\u001b[178D"]
[14.402390666666665,"o","\u001b[?2004h"]
[14.469855666666671,"o","\u001b[?2004l\r\r\n"]
