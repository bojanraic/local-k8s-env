environment:
  # General settings
  name: dev-me # name of the environment; drives the naming of kubernetes cluster and nodes, host containers etc
  base-dir: ${PWD}/.local # where kubernetes logs/storage, and various config files are stored
  expand-base-dir-vars: true # set to false if you use absolute path for base-dir; true if you use relative/expanded path

  # At the moment, KinD on macOS has been tested, with a docker-compatible runtime
  # Podman has been tried out but it is not a first-class citizen with KinD so it is not supported as of yet
  # Linux has not been tested yet
  provider:
    name: kind # provider for kubernetes clusters, must be kind for now
    runtime: docker # docker or podman for container runtime

  kubernetes:
    api-port: 6443 # port for the API server, will be exposed to the host machine as local-ip:api-port
    image: kindest/node # image for the kind nodes
    # renovate: datasource=docker depName=kindest/node
    tag: v1.33.1  # tag for the kind image

  nodes: # common settings for all kubernetes nodes
    servers: 1 # number of control-plane servers/masters
    workers: 1 # number of worker nodes
    allow-scheduling-on-control-plane: true # whether to allow scheduling on control plane nodes even when workers exist
    internal-components-on-control-plane: true # whether to force internal components (cert-manager, nginx-ingress, registry) to run only on control-plane nodes

    labels: # optional: custom labels to apply to nodes
      control-plane: # labels for ALL control-plane nodes (applied to each)
        tier: "control"
        environment: "dev"
      worker: # labels for ALL worker nodes (applied to each)
        tier: "compute"
        environment: "dev"
      # Alternative: specify labels per individual node (overrides global labels)
      # individual:
      #   control-plane-0: # labels for first control-plane node
      #     tier: "control"
      #     zone: "us-west-1a"
      #   control-plane-1: # labels for second control-plane node  
      #     tier: "control"
      #     zone: "us-west-1b"
      #   worker-0: # labels for first worker node
      #     tier: "compute"
      #     zone: "us-west-1a"
      #   worker-1: # labels for second worker node
      #     tier: "compute" 
      #     zone: "us-west-1b"

  local-ip: 192.168.0.10 # local ip, mapping to the host IP to use for DNS resolution and wildcard certificates
  local-domain: dev.me # a domain name to use for custom dns resolution and wildcard certificates 
  local-lb-ports: # list of ports to expose on the load balancer side, mapping to the host machine
    - 80 # http port for nginx ingress controller
    - 443 # https port for nginx ingress controller

  registry:
    name: cr # name, to be used in the final url for the registry, i.e. <registry.name>.<local-domain>
    storage: # use PVC for storage
      size: 15Gi # size of PVC  

  internal-components:
    # renovate: datasource=helm depName=cert-manager
    - cert-manager: "v1.18.2"

    # renovate: datasource=helm depName=app-template
    - app-template: "4.1.2"

    # renovate: datasource=helm depName=ingress-nginx
    - nginx-ingress: "4.12.3"

    # renovate: datasource=docker depName=registry
    - registry: "3"

    # renovate: datasource=docker depName=dockurr/dnsmasq
    - dnsmasq: "2.91"

  use-service-presets: true # whether or not to use the preset values for services; leave true unless you have a good reason to override the defaults
  run-services-on-workers-only: true # whether to force application services to run only on worker nodes (when workers > 0)

  services:
    # System services - pre-configured services with presets, ports, and storage management
    system:
      - name: mysql
        enabled: false # whether or not to install this component and expose the port(s)
        namespace: common-services
        ports:
          - 3306 # port to expose on the host machine
        storage: # use PVC for storage
          size: 10Gi # size of PVC
        config:
          repo: # Optional: override default helm repository
            name: bitnami # helm repository name
            url: https://charts.bitnami.com/bitnami # helm repository URL
          chart: bitnami/mysql # the chart to use
          # renovate: datasource=helm depName=mysql
          version: 13.0.2
          values: # additional values to use for the chart
            auth:
              createDatabase: false # whether or not to create a database

      - name: postgres
        enabled: true # whether or not to install this component and expose the port(s)
        namespace: common-services
        ports:
          - 5432
        storage: # use PVC for storage
          size: 5Gi
        config:
          repo:
            name: bitnami # helm repository name
            url: https://charts.bitnami.com/bitnami # helm repository URL
          chart: bitnami/postgresql # the chart to use
          # renovate: datasource=helm depName=postgresql
          version: 16.7.15

      - name: mongodb
        enabled: false # whether or not to install this component and expose the port(s)
        namespace: common-services
        ports:
          - 27017 # port to expose on the host machine
        storage: # use PVC for storage
          size: 5Gi # size of PVC
        config:
          repo:
            name: bitnami # helm repository name
            url: https://charts.bitnami.com/bitnami # helm repository URL
          chart: bitnami/mongodb # the chart to use
          # renovate: datasource=helm depName=mongodb
          version: 16.5.27

      - name: rabbitmq
        enabled: false # whether or not to install this component and expose the port(s)
        namespace: common-services
        ports:
          - 5672 # port to expose on the host machine
        storage: # use PVC for storage
          size: 2Gi # size of PVC
        config:
          repo:
            name: bitnami # helm repository name
            url: https://charts.bitnami.com/bitnami # helm repository URL
          chart: bitnami/rabbitmq # the chart to use
          # renovate: datasource=helm depName=rabbitmq
          version: 16.0.10
          values: 
            ingress:
              enabled: true
              hostname: rmq.dev.me
              annotations:
                cert-manager.io/cluster-issuer: "mkcert-issuer"
                nginx.ingress.kubernetes.io/ssl-redirect: "true"
                nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              tls: true

      - name: valkey
        enabled: false # whether or not to install this component and expose the port(s)
        namespace: common-services
        ports:
          - 6379 # port to expose on the host machine
        storage:
          size: 1Gi
        config:
          repo:
            name: bitnami # helm repository name
            url: https://charts.bitnami.com/bitnami # helm repository URL
          chart: bitnami/valkey # the chart to use
          # renovate: datasource=helm depName=valkey
          version: 3.0.16

    # User services - additional services users can add without presets
    # Users are expected to provide:
    #  - complete helm values configuration
    #  - helm repository configuration (required)
    #  - ports they want to have exposed on the host machine (optional)

    user: 
      - name: http-webhook
        enabled: true
        namespace: default
        ports: [] # Optional: open up ports on host machine
        config:
          repo: # repo is required 
            name: securecodebox 
            url: https://charts.securecodebox.io/
          chart: securecodebox/http-webhook
          # renovate: datasource=helm depName=http-webhook
          version: 4.16.0
          values: 
            ingress:
              enabled: true
              ingressClassName: "nginx"
              annotations:
                cert-manager.io/cluster-issuer: "mkcert-issuer"
                nginx.ingress.kubernetes.io/ssl-redirect: "true"
                nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              hosts:
                - host: echo.dev.me
                  paths:
                    - /
              tls:
                - hosts:
                    - echo.dev.me
                  secretName: echo-dev-me-tls

# Example a multi-node setup with clean separation of infrastructure and application workloads:
# my-sample-env:
#   name: my-cluster
#   nodes:
#     servers: 1
#     workers: 3
#     allow-scheduling-on-control-plane: true
#     internal-components-on-control-plane: true  # cert-manager, nginx-ingress, registry on control-plane
#     labels:
#       control-plane:
#         tier: "infra"
#       worker:
#         tier: "app"
#   run-services-on-workers-only: true  # mysql, postgres, etc. on workers only
#   
#   # This creates a clean separation:
#   # - Control-plane: Kubernetes system + internal components (cert-manager, nginx-ingress, registry)
#   # - Workers: Application services (databases, message queues, user services, etc.)
