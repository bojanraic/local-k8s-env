# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

includes:
  vars: .taskfiles/vars
  kubernetes: .taskfiles/kubernetes
  validate: .taskfiles/validate
  help: .taskfiles/help

tasks:
  check-deps:
    desc: Check and install required dependencies
    cmds:
      - ./.scripts/check-dependencies.sh

  init:
    desc: Initialize the local environment
    deps: [check-deps]
    cmds:
      - task: generate-dirs
      - task: generate-configs
      - task: setup-certificates
      - task: setup-dnsmasq

  generate-dirs:
    desc: Create necessary directories
    cmds:
      - |
        if [ {{.SERVERS}} -ge 1 ]; then
          for i in $(seq 0 $(expr {{.SERVERS}} - 1)); do
            mkdir -p {{.K8S_DIR}}/logs/server-$i
            mkdir -p {{.K8S_DIR}}/storage/server-$i
          done
        fi
        if [ {{.WORKERS}} -ge 1 ]; then
          for i in $(seq 0 $(expr {{.WORKERS}} - 1)); do
            mkdir -p {{.K8S_DIR}}/logs/agent-$i
            mkdir -p {{.K8S_DIR}}/storage/agent-$i
          done
        fi
      - mkdir -p {{.K8S_DIR}}/config

  generate-configs:
    desc: Generate all configuration files
    cmds:
      - python3 ./.scripts/generate_configs.py '{{.CONFIG_FILE}}' '{{.OS}}'
    sources:
      - .local-env.yaml
    generates:
      - '{{.K8S_DIR}}/config/cluster.yaml'
      - '{{.K8S_DIR}}/config/containerd.yaml'
      - '{{.K8S_DIR}}/config/dnsmasq.conf'
      - '{{.K8S_DIR}}/config/coredns-custom.yaml'
      - '{{.K8S_DIR}}/config/helmfile.yaml'

  setup-certificates:
    desc: Setup mkcert certificates
    cmds:
      - ./.scripts/setup-certificates.sh {{.LOCAL_DOMAIN}} {{.LOCAL_IP}} {{.K8S_DIR}}/certs
    status:
      - test -f "{{.ROOT_CA_PATH}}/rootCA.pem"
      - test -f {{.K8S_DIR}}/certs/rootCA.pem
      - test -f {{.K8S_DIR}}/certs/{{.LOCAL_DOMAIN}}.pem

  setup-dnsmasq:
    desc: Setup dnsmasq configuration
    cmds:
      - ./.scripts/setup-dns.sh {{.CONFIG_FILE}} {{.LOCAL_DOMAIN}} {{.LOCAL_IP}} {{.K8S_DIR}}/config/dnsmasq.conf {{.DNSMASQ_VERSION}}
    status:
      - test -f {{.K8S_DIR}}/config/dnsmasq.conf

  start-dnsmasq:
    desc: Start dnsmasq container
    cmds:
      - |
        if [ -z "$({{.RUNTIME_BINARY}} ps -q -f name={{.DNS_CONTAINER_NAME}})" ]; then
          {{.RUNTIME_BINARY}} run -d --name {{.DNS_CONTAINER_NAME}} \
            --network {{.CONTAINER_NETWORK_NAME}} \
            --restart unless-stopped \
            -p 53:53/udp \
            -p 53:53/tcp \
            -v "{{.K8S_DIR}}/config/dnsmasq.conf":"/etc/dnsmasq.conf" \
            dockurr/dnsmasq:{{.DNSMASQ_VERSION}}
        else
          echo "ðŸ”„ DNS container {{.DNS_CONTAINER_NAME}} is already running."
        fi

  create-cluster:
    desc: Create local cluster
    deps: [init]
    cmds:
      - K8S_DIR={{.K8S_DIR}} {{.PROVIDER_BINARY}} cluster create -c {{.K8S_DIR}}/config/cluster.yaml

  create-env:
    desc: Creates the local environment
    cmds:
      - task: init
      - task: create-cluster
      - task: start-dnsmasq
      - task: kubernetes:fetch-kubeconfig
      - task: kubernetes:customize-coredns
      - task: kubernetes:label-worker-nodes
      - task: kubernetes:create-wildcard-cert
      - task: kubernetes:deploy-services
      - task: kubernetes:fetch-service-secrets
      - echo "ðŸŽ‰ Local environment started successfully."
      - |
        if [ -s "{{.K8S_DIR}}/service-secrets.txt" ]; then
          echo "ðŸ”‘ Service secrets:"
          cat {{.K8S_DIR}}/service-secrets.txt
        fi

  stop-env:
    desc: Stop the local environment
    cmds:
      - "{{.PROVIDER_BINARY}} cluster stop {{.CLUSTER_NAME}}"
      - "{{.RUNTIME_BINARY}} stop {{.DNS_CONTAINER_NAME}} || true"

  start-env:
    desc: Start the local environment
    cmds:
      - "{{.PROVIDER_BINARY}} cluster start {{.CLUSTER_NAME}}"
      - "{{.RUNTIME_BINARY}} start {{.DNS_CONTAINER_NAME}} || true"

  destroy-env:
    desc: Destroy the local environment
    cmds:
      - |
        if [[ "{{.OS}}" == "Darwin" ]]; then
          sudo rm -f /etc/resolver/{{.LOCAL_DOMAIN}}
          rm -rf {{.K8S_DIR}}
        elif [[ "{{.OS}}" == "Linux" ]]; then
          sudo rm -f /etc/systemd/resolved.conf.d/{{.LOCAL_DOMAIN}}.conf
          sudo systemctl restart systemd-resolved
          sudo rm -rf {{.K8S_DIR}}
        else
          echo "Unsupported OS: {{.OS}}"
        fi
      - "{{.RUNTIME_BINARY}} rm -f {{.DNS_CONTAINER_NAME}} || true"
      - "{{.PROVIDER_BINARY}} cluster delete {{.CLUSTER_NAME}}"

  recreate-env:
    desc: Recreate the local environment
    cmds:
      - task: destroy-env
      - task: create-env

  validate-env:
    desc: Validate the local environment
    cmds:
      - task: validate:local-registry
      - task: validate:app

  create-validate-env:
    desc: Create a clean local environment and validate it
    cmds:
      - task: recreate-env
      - task: validate-env

  default: task --list
