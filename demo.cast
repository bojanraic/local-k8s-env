{"version": 2, "width": 203, "height": 44, "timestamp": 1739299914, "env": {"SHELL": "/bin/bash", "TERM": "xterm-256color"}}
[0.042605,"o","\u001b[?2004h\u001b]0;user@pop-os: ~/k8s\u0007\u001b[01;32muser@pop-os\u001b[00m:\u001b[01;34m~/k8s\u001b[00m$ "]
[0.522696,"o","\u001b[mtask create-env\u001b"]
[1.12193325,"o","\r\n"]
[1.122206,"o","\u001b[?2004l\r"]
[1.24409425,"o","[\u001b[33mgenerate-dirs\u001b[0m] 🔄 Creating directories...\r\n"]
[1.248651,"o","[\u001b[33mgenerate-dirs\u001b[0m]   📁 Creating control plane directories...\r\n"]
[1.251052,"o","[\u001b[33mgenerate-dirs\u001b[0m]   📁 Creating worker node directories...\r\n"]
[1.26943775,"o","["]
[1.26958975,"o","\u001b[33mgenerate-dirs\u001b[0m] ✅ Directories created\r\n"]
[1.280543,"o","[\u001b[34mgenerate-configs\u001b[0m] 🔄 Generating configuration files...\r\n"]
[1.34980225,"o","[sudo] password for user: "]
[2.24062225,"o","\r\n"]
[2.4504385,"o","[\u001b[34mgenerate-configs\u001b[0m] "]
[2.45210725,"o","📝 Generating configurations from /home/user/k8s/k8s-env.yaml\r\n[\u001b[34mgenerate-configs\u001b[0m] 📝 Generating helmfile.yaml\r\n[\u001b[34mgenerate-configs\u001b[0m] ✅ Created /home/user/k8s/.local/dev-me/config/helmfile.yaml\r\n[\u001b[34mgenerate-configs\u001b[0m] 📝 Generating containerd.yaml\r\n[\u001b[34mgenerate-configs\u001b[0m] ✅ Created /home/user/k8s/.local/dev-me/config/containerd.yaml\r\n[\u001b[34mgenerate-configs\u001b[0m] 📝 Generating dnsmasq.conf\r\n[\u001b[34mgenerate-configs\u001b[0m] ✅ Created /home/user/k8s/.local/dev-me/config/dnsmasq.conf\r\n[\u001b[34mgenerate-configs\u001b[0m] 📝 Generating cluster.yaml\r\n[\u001b[34mgenerate-configs\u001b[0m] ✅ Created /home/user/k8s/.local/dev-me/config/cluster.yaml\r\n[\u001b[34mgenerate-configs\u001b[0m] 🔧 Setting up DNS resolver for dev.me...\r\n[\u001b[34mgenerate-configs\u001b[0m] 🔧 Configuring systemd-resolved...\r\n[\u001b[34mgenerate-configs\u001b[0m] ✅ Resolver configuration created at /etc/systemd/resolved.conf.d/dev.me.conf\r\n[\u001b[34mgenerate-configs\u001b[0m] ✨ Configuration generation complete!\r\n"]
[2.482835,"o","["]
[2.48296475,"o","\u001b[34mgenerate-configs"]
[2.4831015,"o","\u001b[0m] ✅ Configuration files generated\r\n"]
[2.49899525,"o","[\u001b[35msetup-certificates\u001b[0m] 🔄 Setting up certificates...\r\n"]
[2.5435365,"o","[\u001b[35msetup-certificates\u001b[0m] The local CA is already installed in the system trust store! 👍\r\n"]
[2.570592,"o","[\u001b[35msetup-certificates\u001b[0m] The local CA is already installed in the Firefox and/or Chrome/Chromium trust store! 👍\r\n[\u001b[35msetup-certificates\u001b[0m] \r\n"]
[2.58329925,"o","[\u001b[35msetup-certificates\u001b[0m]   🔐 Generating certificates using mkcert...\r\n"]
[2.70357275,"o","["]
[2.703648,"o","\u001b[35msetup-certificates\u001b[0m] \r\n[\u001b[35msetup-certificates\u001b[0m] Created a new certificate valid for the following names 📜\r\n[\u001b[35msetup-certificates\u001b[0m]  - \"*.dev.me\"\r\n[\u001b[35msetup-certificates\u001b[0m]  - \"dev.me\"\r\n[\u001b[35msetup-certificates\u001b[0m] \r\n[\u001b[35msetup-certificates\u001b[0m] Reminder: X.509 wildcards only go one level deep, so this won't match a.b.dev.me ℹ️\r\n[\u001b[35msetup-certificates\u001b[0m] \r\n[\u001b[35msetup-certificates\u001b[0m] The certificate is at \"/home/user/k8s/.local/dev-me/certs/dev.me.pem\" and the key at \"/home/user/k8s/.local/dev-me/certs/dev.me-key.pem\" ✅\r\n[\u001b[35msetup-certificates\u001b[0m] \r\n[\u001b[35msetup-certificates\u001b[0m] It will expire on 11 May 2027 🗓\r\n[\u001b[35msetup-certificates\u001b[0m] \r\n"]
[3.73891175,"o","[\u001b[35m"]
[2.739033,"o","setup-certificates\u001b[0m]   📁 Setting up containerd registry certificates...\r\n"]
[2.75349825,"o","[\u001b[35msetup-certificates\u001b[0m] ✅ Certificates setup complete\r\n"]
[2.84133125,"o","[\u001b[36mstart-dnsmasq\u001b[0m] 🔄 Starting DNS service...\r\n"]
[2.87307375,"o","[\u001b[36mstart-dnsmasq\u001b[0m]   🚀 Starting dnsmasq container...\r\n"]
[2.9196575,"o","[\u001b[36mstart-dnsmasq\u001b[0m] 74da407a80baf9096eea867aabead590f5bf48a40571ee4e7e90a595b83fe60a\r\n"]
[3.30097725,"o","[\u001b[36mstart-dnsmasq\u001b[0m]   🔍 Verifying DNS resolution...\r\n"]
[3.327043,"o","[\u001b[36mstart-dnsmasq\u001b[0m] ; <<>> DiG 9.18.30-0ubuntu0.22.04.2-Ubuntu <<>> @192.168.22.130 -p 53 test.dev.me\r\n[\u001b[36mstart-dnsmasq\u001b[0m] test.dev.me.\t\t0\tIN\tA\t192.168.22.130\r\n[\u001b[36mstart-dnsmasq\u001b[0m] ;; SERVER: 192.168.22.130#53(192.168.22.130) (UDP)\r\n"]
[3.32720725,"o","[\u001b[36mstart-dnsmasq\u001b[0m] ✅ DNS service ready\r\n"]
[3.425099,"o","[\u001b[32mkubernetes:create-cluster\u001b[0m] 🔄 Creating KinD cluster 'dev-me'...\r\n"]
[3.52481075,"o","[\u001b[32m"]
[3.5249005,"o","kubernetes:create-cluster"]
[3.52493975,"o","\u001b[0m] Creating cluster \"dev-me\" ...\r\n[\u001b[32m"]
[3.524953,"o","kubernetes:create-cluster\u001b[0m] "]
[3.52496425,"o"," • Ensuring node image (kindest/node:v1.32.1) 🖼  ...\r\n"]
[3.623932,"o","["]
[3.6240985,"o","\u001b[32mkubernetes:create-cluster\u001b[0m]  ✓ Ensuring node image (kindest/node:v1.32.1) 🖼\r\n[\u001b[32m"]
[3.62415075,"o","kubernetes:create-cluster\u001b[0m]  • Preparing nodes 📦 📦   ...\r\n"]
[4.26987025,"o","["]
[4.2701075,"o","\u001b[32mkubernetes:create-cluster\u001b[0m]  ✓ Preparing nodes 📦 📦 \r\n"]
[4.29458125,"o","["]
[4.29472075,"o","\u001b[32m"]
[4.2947895,"o","kubernetes:create-cluster\u001b[0m] "]
[4.29482775,"o"," • Writing configuration 📜  ..."]
[4.29489775,"o","\r\n"]
[4.6179215,"o","[\u001b[32mkubernetes:create-cluster\u001b[0m]  ✓ Writing configuration 📜\r\n[\u001b[32mkubernetes:create-cluster\u001b[0m]  • Starting control-plane 🕹️  ...\r\n"]
[4.888464,"o","[\u001b[32mkubernetes:create-cluster\u001b[0m]  ✓ Starting control-plane 🕹️\r\n[\u001b[32mkubernetes:create-cluster\u001b[0m]  • Installing CNI 🔌  ...\r\n"]
[5.06167825,"o","[\u001b[32mkubernetes:create-cluster\u001b[0m]  ✓ Installing CNI 🔌\r\n[\u001b[32mkubernetes:create-cluster\u001b[0m]  • Installing StorageClass 💾  ...\r\n"]
[5.21358175,"o","[\u001b[32mkubernetes:create-cluster\u001b[0m]  ✓ Installing StorageClass 💾\r\n"]
[5.24262125,"o","[\u001b[32m"]
[6.242652,"o","kubernetes:create-cluster\u001b[0m]  • Joining worker nodes 🚜  ...\r\n"]
[6.8939615,"o","["]
[6.8941335,"o","\u001b[32mkubernetes:create-cluster\u001b[0m]  ✓ Joining worker nodes 🚜\r\n"]
[7.02431975,"o","[\u001b[32mkubernetes:create-cluster\u001b[0m] Set kubectl context to \"kind-dev-me\"\r\n[\u001b[32mkubernetes:create-cluster\u001b[0m] You can now use your cluster with:\r\n[\u001b[32mkubernetes:create-cluster\u001b[0m] \r\n[\u001b[32mkubernetes:create-cluster\u001b[0m] kubectl cluster-info --context kind-dev-me\r\n[\u001b[32mkubernetes:create-cluster"]
[7.024411,"o","\u001b[0m] \r\n[\u001b[32mkubernetes:create-cluster\u001b[0m] Have a nice day! 👋\r\n"]
[7.03540225,"o","["]
[7.03563,"o","\u001b[32mkubernetes:create-cluster\u001b[0m] ✅ KinD cluster 'dev-me' created successfully\r\n"]
[7.05530075,"o","["]
[7.055341,"o","\u001b[31m"]
[7.0553575,"o","inject-dns-nameserver\u001b[0m"]
[7.05536625,"o","] "]
[7.0553705,"o","🔄 Injecting DNS container IP into cluster nodes..."]
[7.0556975,"o","\r\n"]
[7.11371525,"o","["]
[7.113827,"o","\u001b[31minject-dns-nameserver\u001b[0m]   📝 Updating DNS for node: dev-me-control-plane\r\n"]
[7.14949025,"o","["]
[7.14953125,"o","\u001b[31m"]
[7.1495405,"o","inject-dns-nameserver"]
[7.149613,"o","\u001b[0m]   📝 Updating DNS for node: dev-me-worker\r\n"]
[7.1755875,"o","[\u001b[31minject-dns-nameserver\u001b[0m] ✅ DNS nameserver injection complete\r\n"]
[7.2981445,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] ⏳ Waiting for KinD cluster...\r\n"]
[7.332336,"o","["]
[7.33282275,"o","\u001b[93m"]
[7.33283725,"o","kubernetes:wait-for-ready\u001b[0m] Switched to context \"kind-dev-me\"."]
[7.33291275,"o","\r\n"]
[8.0997975,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] node/dev-me-control-plane condition met\r\n"]
[8.14247275,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] node/dev-me-worker condition met\r\n"]
[8.14328775,"o","[\u001b[93mkubernetes:wait-for-ready\u001b[0m] ✅ Cluster is ready\r\n"]
[8.155717,"o","["]
[8.15583175,"o","\u001b[94mkubernetes:set-control-plane-scheduling\u001b[0m] 🔄 Enabling scheduling on control plane nodes...\r\n"]
[8.18270575,"o","["]
[8.1827965,"o","\u001b[94mkubernetes:set-control-plane-scheduling\u001b[0m] node/dev-me-control-plane untainted\r\n"]
[8.18335775,"o","["]
[8.18338525,"o","\u001b[94mkubernetes:set-control-plane-scheduling\u001b[0m] "]
[8.1835235,"o","✅ Scheduling enabled on control plane nodes\r\n"]
[8.2160885,"o","[\u001b[95mkubernetes:label-worker-nodes\u001b[0m] 🔄 Labeling worker nodes...\r\n"]
[8.26337325,"o","[\u001b[95mkubernetes:label-worker-nodes\u001b[0m] node/dev-me-worker labeled\r\n"]
[8.26435175,"o","["]
[8.26440625,"o","\u001b[95mkubernetes:label-worker-nodes\u001b[0m] ✅ Labeled node dev-me-worker as worker\r\n"]
[8.307067,"o","["]
[8.30819325,"o","\u001b[96mkubernetes:list-nodes\u001b[0m] 🔄 Listing cluster nodes...\r\n"]
[8.40269975,"o","[\u001b[96mkubernetes:list-nodes\u001b[0m] NAME                   STATUS   ROLES           AGE   VERSION\r\n[\u001b[96mkubernetes:list-nodes\u001b[0m] dev-me-control-plane   Ready    control-plane   29s   v1.32.1\r\n[\u001b[96mkubernetes:list-nodes\u001b[0m] dev-me-worker          Ready    worker          18s   v1.32.1\r\n"]
[8.58046075,"o","["]
[8.58897525,"o","\u001b[96mkubernetes:list-nodes\u001b[0m] ✅ Node list complete\r\n"]
[8.66624525,"o","[\u001b[92mkubernetes:create-wildcard-cert\u001b[0m] 🔄 Creating wildcard TLS certificate...\r\n"]
[8.7223825,"o","[\u001b[92mkubernetes:create-wildcard-cert\u001b[0m] secret/wildcard-tls created\r\n"]
[8.73161125,"o","[\u001b[92mkubernetes:create-wildcard-cert\u001b[0m] ✅ Wildcard TLS certificate created\r\n"]
[8.83380925,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] 🔄 Deploying core services...\r\n"]
[8.83973175,"o","["]
[8.8399365,"o","\u001b[91mkubernetes:deploy-services\u001b[0m]   📦 Installing/upgrading Helm charts for enabled services...\r\n"]
[8.93063675,"o","["]
[8.93160325,"o","\u001b[91mkubernetes:deploy-services\u001b[0m] Adding repo ingress-nginx https://kubernetes.github.io/ingress-nginx\r\n"]
[9.04431475,"o","["]
[9.044379,"o","\u001b[91mkubernetes:deploy-services\u001b[0m] \"ingress-nginx\" has been added to your repositories\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Adding repo bitnami https://charts.bitnami.com/bitnami\r\n"]
[9.21367675,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] \"bitnami\" has been added to your repositories\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[9.2143885,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Adding repo bjw-s https://bjw-s.github.io/helm-charts/\r\n"]
[9.301302,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] \"bjw-s\" has been added to your repositories\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[9.3016405,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^ingress-nginx$\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^registry$\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^mysql$\r\n"]
[9.34021175,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] "]
[9.3402305,"o","Upgrading release=ingress-nginx, chart=ingress-nginx/ingress-nginx, namespace=ingress-nginx\r\n"]
[10.0314235,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Release \"ingress-nginx\" does not exist. Installing it now.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAME: ingress-nginx\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] LAST DEPLOYED: Tue Feb 11 19:53:20 2025\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAMESPACE: ingress-nginx\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] STATUS: deployed\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] REVISION: 1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] TEST SUITE: None\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NOTES:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] The ingress-nginx controller has been installed.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Get the application URL by running these commands:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   export HTTP_NODE_PORT=$(kubectl get service --namespace ingress-nginx ingress-nginx-controller --output jsonpath=\"{.spec.ports[0].nodePort}\")\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   export HTTPS_NODE_PORT=$(kubectl get service --namespace ingress-nginx ingress-nginx-controller --output jsonpath="]
[10.03144925,"o","\"{.spec.ports[1].nodePort}\")\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   export NODE_IP=\"$(kubectl get nodes --output jsonpath=\"{.items[0].status.addresses[1].address}\")\"\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   echo \"Visit http://${NODE_IP}:${HTTP_NODE_PORT} to access your application via HTTP.\"\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   echo \"Visit https://${NODE_IP}:${HTTPS_NODE_PORT} to access your application via HTTPS.\"\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] An example Ingress that makes use of the controller:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   apiVersion: networking.k8s.io/v1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   kind: Ingress\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   metadata:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     name: example\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     namespace: foo\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   spec:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     ingressClassName: nginx\r\n[\u001b[91mkubernetes:"]
[10.0314525,"o","deploy-services\u001b[0m]     rules:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]       - host: www.example.com\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]         http:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]           paths:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]             - pathType: Prefix\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]               backend:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                 service:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                   name: exampleService\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                   port:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]                     number: 80\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]               path: /\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     # This section is only required if TLS is to be enabled for the Ingress\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     tls:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]       - hosts:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]         - www.example.com\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]         secretName: examp"]
[10.03146075,"o","le-tls\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   apiVersion: v1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   kind: Secret\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   metadata:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     name: example-tls\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     namespace: foo\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   data:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     tls.crt: <base64 encoded cert>\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]     tls.key: <base64 encoded key>\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   type: kubernetes.io/tls\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^ingress-nginx$\r\n"]
[10.0555685,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] ingress-nginx\tingress-nginx\t1       \t2025-02-11 19:53:20.799023714 +0100 CET\tdeployed\tingress-nginx-4.12.0\t1.12.0     \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[10.0561225,"o","[\u001b[91m"]
[10.05617325,"o","kubernetes:deploy-services\u001b[0m] Upgrading release=registry, chart=bjw-s/app-template, namespace=registry\r\n"]
[10.7549485,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Release \"registry\" does not exist. Installing it now.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] "]
[10.7555215,"o","NAME: registry\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] LAST DEPLOYED: Tue Feb 11 19:55:02 2025\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAMESPACE: registry\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] STATUS: deployed\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] REVISION: 1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] TEST SUITE: None\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^registry$\r\n"]
[10.781637,"o","["]
[10.7816645,"o","\u001b[91m"]
[10.781673,"o","kubernetes:deploy-services"]
[10.7816865,"o","\u001b[0m] registry\tregistry \t1       \t2025-02-11 19:55:02.594828333 +0100 CET\tdeployed\tapp-template-3.7.0\t           \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n"]
[10.78212225,"o","[\u001b[91m"]
[10.78224,"o","kubernetes:deploy-services\u001b[0m] Upgrading release=mysql, chart=bitnami/mysql, namespace=mysql\r\n"]
[10.96573775,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] Release \"mysql\" does not exist. Installing it now.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAME: mysql\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] LAST DEPLOYED: Tue Feb 11 19:55:51 2025\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NAMESPACE: mysql\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] STATUS: deployed\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] REVISION: 1\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] TEST SUITE: None\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] NOTES:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] CHART NAME: mysql\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] CHART VERSION: 12.2.2\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] APP VERSION: 8.4.4\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Did you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendo"]
[10.96586825,"o","rs/bitnami for more information.\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] ** Please be patient while the chart is being deployed **\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Tip:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   Watch the deployment status using the command: kubectl get pods -w --namespace mysql\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Services:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   echo Primary: mysql.mysql.svc.cluster.local:3306\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Execute the following to get the administrator credentials:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   echo Username: root\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace mysql mysql -o jsonpath=\"{.data.mysql-root-password"]
[10.965879,"o","}\" | base64 -d)\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] To connect to your database:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   1. Run a pod that you can use as a client:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]       kubectl run mysql-client --rm --tty -i --restart='Never' --image  docker.io/bitnami/mysql:8.4.4-debian-12-r0 --namespace mysql --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   2. To connect to primary service (read/write):\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]       mysql -h mysql.mysql.svc.cluster.local -uroot -p\"$MYSQL_ROOT_PASSWORD\"\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernet"]
[10.965883,"o","es:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] WARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   - primary.resources\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m]   - secondary.resources\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] +info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] Listing releases matching ^mysql$\r\n"]
[10.98913625,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] mysql\tmysql    \t1       \t2025-02-11 19:55:51.355846797 +0100 CET\t"]
[10.989158,"o","deployed\tmysql-12.2.2\t8.4.4      \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91mkubernetes:deploy-services\u001b[0m] \r\n[\u001b[91m"]
[10.98916225,"o","kubernetes:deploy-services\u001b[0m] UPDATED RELEASES:"]
[10.989165,"o","\r\n["]
[10.9891675,"o","\u001b[91mkubernetes:deploy-services\u001b[0m"]
[10.989175,"o","] NAME            NAMESPACE       CHART                         VERSION   DURATION\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[10.98918225,"o","] ingress-nginx   ingress-nginx   ingress-nginx/ingress-nginx   4.12.0       1m39s\r\n[\u001b[91mkubernetes:deploy-services\u001b[0m"]
[10.98918525,"o","] registry        registry        bjw-s/app-template            3.7.0          47s\r\n"]
[10.989191,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] mysql           mysql           bitnami/mysql                 12.2.2       2m13s"]
[10.9891935,"o","\r\n["]
[10.989196,"o","\u001b[91mkubernetes:deploy-services\u001b[0m"]
[10.98919875,"o","] \r\n"]
[11.00003975,"o","[\u001b[91mkubernetes:deploy-services\u001b[0m] ✅ Core services deployed successfully\r\n"]
[11.01485,"o","["]
[11.01512175,"o","\u001b[33mkubernetes:fetch-service-secrets\u001b[0m] 🔄 Fetching service secrets...\r\n"]
[11.0538315,"o","[\u001b[33mkubernetes:fetch-service-secrets\u001b[0m] 🔑 Passwords for enabled password-protected services have been written to /home/user/k8s/.local/dev-me/service-secrets.txt\r\n[\u001b[33m"]
[11.05386025,"o","kubernetes:fetch-service-secrets\u001b[0m] 🔑 Service secrets:\r\n"]
[11.054441,"o","[\u001b[33m"]
[11.05448775,"o","kubernetes:fetch-service-secrets\u001b[0m] Service mysql, Password: wajGfNxf5f\r\n"]
[11.0618175,"o","[\u001b[33mkubernetes:fetch-service-secrets\u001b[0m] ✅ Service secrets fetched successfully\r\n"]
[11.07754825,"o","\u001b[?2004h"]
[11.0775675,"o","\u001b]0;user@pop-os: ~/k8s\u0007\u001b[01;32muser@pop-os\u001b[00m:\u001b[01;34m~/k8s\u001b[00m$ "]
[12.26421725,"o","task validate-env"]
[12.809064,"o","[\u001b[33m"]
[12.8091395,"o","validate:tcp-services\u001b[0m] 🔍 Validating enabled TCP services from local machine:\r\n"]
[12.813101,"o","[\u001b[33m"]
[12.813183,"o","validate:tcp-services\u001b[0m]   🔄 Validating mysql on port 3306...\r\n"]
[12.814153,"o","["]
[12.81422475,"o","\u001b[33m"]
[12.81427875,"o","validate:tcp-services"]
[12.814371,"o","\u001b[0m] Connection to mysql.dev.me (192.168.22.130) 3306 port [tcp/mysql] succeeded!\r\n[\u001b[33mvalidate:tcp-services\u001b[0m]   ✅ mysql is reachable on port 3306\r\n[\u001b[33mvalidate:tcp-services\u001b[0m] ✅ All services are reachable from local machine\r\n"]
[12.96162675,"o","[\u001b[34mvalidate:build-push-image\u001b[0m] 🔄 Building and pushing a sample image to local registry...\r\n"]
[13.072993,"o","[\u001b[34mvalidate:build-push-image\u001b[0m] #0 building with \"default\" instance using docker driver\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #1 [internal] load build definition from Dockerfile\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #1 transferring dockerfile: 453B done\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #1 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #2 [internal] load metadata for docker.io/library/busybox:1.37.0-uclibc\r\n"]
[13.35350175,"o","[\u001b[34mvalidate:build-push-image\u001b[0m] #2 DONE 1.3s\r\n"]
[13.370888,"o","[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #3 [internal] load .dockerignore\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #3 transferring context: 2B done\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #3 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #4 [1/4] FROM docker.io/library/busybox:1.37.0-uclibc@sha256:f1a295688a1cad4f66e7f45484a882a8b45fbdea28fa0a889ac17146775ad1a2\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #4 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #5 [internal] load build context\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #5 transferring context: 27B done\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #5 DONE 0.0s\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #6 [2/4] RUN mkdir -p /www\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #6 CACHED\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #7 [3/4] COPY ./ep.sh /ep.sh\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #7 CACHED\r"]
[13.3713215,"o","\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #8 [4/4] RUN chmod +x /ep.sh\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #8 CACHED\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] \r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #9 exporting to image\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #9 exporting layers done\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #9 writing image sha256:1c0842da48a78eb7f2a8a6f1a71f415ab3280f21a1623875b2aab892a6534e42 done\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #9 naming to cr.dev.me/cr-test:26b63b7c done\r\n[\u001b[34mvalidate:build-push-image\u001b[0m] #9 DONE 0.0s\r\n"]
[14.95955675,"o","[\u001b[34mvalidate:build-push-image\u001b[0m] ✅ Sample image built and pushed successfully\r\n"]
[14.9892925,"o","[\u001b[35mvalidate:deploy-test-app\u001b[0m] 🔄 Deploying a test app Helm release based on image tag 26b63b7c...\r\n"]
[15.00932675,"o","[\u001b[35mvalidate:deploy-test-app\u001b[0m] Release \"cr-test\" does not exist. Installing it now.\r\n"]
[16.77582925,"o","[\u001b[35mvalidate:deploy-test-app\u001b[0m] NAME: cr-test\r\n[\u001b[35mvalidate:deploy-test-app\u001b[0m] LAST DEPLOYED: Tue Feb 11 20:00:46 2025\r\n[\u001b[35mvalidate:deploy-test-app\u001b[0m] NAMESPACE: default\r\n[\u001b[35mvalidate:deploy-test-app\u001b[0m] STATUS: deployed\r\n[\u001b[35mvalidate:deploy-test-app\u001b[0m] REVISION: 1\r\n[\u001b[35mvalidate:deploy-test-app\u001b[0m] TEST SUITE: None\r\n"]
[16.7767375,"o","[\u001b[35mvalidate:deploy-test-app\u001b[0m] ✅ Test app Helm release based on image tag 26b63b7c deployed successfully\r\n"]
[16.787229,"o","[\u001b[36mvalidate:app\u001b[0m] 🔄 Validating sample application...\r\n"]
[17.0502005,"o","[\u001b[36mvalidate:app\u001b[0m] \r\n[\u001b[36mvalidate:app\u001b[0m] 🌐 Registry Test (https://cr-test.dev.me/):\r\n[\u001b[36mvalidate:app\u001b[0m] \r\n"]
[17.083445,"o","["]
[17.08356175,"o","\u001b[36mvalidate:app\u001b[0m] <html><head><title>Local Kubernetes Test</title></head><body><h1>Welcome to your local Kubernetes development environment!</h1><p>This container is running an image from the local container registry hosted inside the kubernetes cluster.</p><p>Pod Name: cr-test-6458f5894c-5t2wb</p><p>Image Tag: 26b63b7c</p></body></html>\r\n"]
[17.0901565,"o","["]
[17.09018175,"o","\u001b[36mvalidate:app"]
[17.4901905,"o","\u001b[0m] ✅ Sample application validation complete"]
[17.4903485,"o","\r\n"]
[17.49659025,"o","\u001b[?2004h\u001b]0;user@pop-os: ~/k8s\u0007\u001b[01;32muser@pop-os\u001b[00m:\u001b[01;34m~/k8s\u001b[00m$ "]
