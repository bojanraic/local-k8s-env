# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

tasks:
  default: task --list --taskfile "{{.ROOT_DIR}}/.taskfiles/kubernetes/Taskfile.yaml"

  wait-for-ready:
    desc: Wait for the cluster to be ready
    silent: true
    cmds:
      - |
        echo "‚è≥ Waiting for {{.PROVIDER}} cluster..."
        
        # Set context and verify connection
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} config use-context {{.PROVIDER}}-{{.CLUSTER_NAME}}
        
        # Give the API server a moment to initialize
        sleep 3
        
        # Wait for all nodes to be ready
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} wait --for=condition=Ready nodes --all
        echo "‚úÖ Cluster is ready"

  fetch-kubeconfig:
    desc: Fetch kubeconfig for the kubernetes cluster
    silent: true
    cmds:
      - |
        {{.PROVIDER_BINARY}} get kubeconfig --name {{.CLUSTER_NAME}} > {{.KUBECONFIG_PATH}}
      - chmod 0600 {{.KUBECONFIG_PATH}}
    preconditions:
      - msg: "{{.PROVIDER}} cluster {{.CLUSTER_NAME}} not found"
        sh: |
          {{.PROVIDER_BINARY}} get clusters | grep -q {{.CLUSTER_NAME}}
    status:
      - test -f {{.KUBECONFIG_PATH}} && grep -q {{.CLUSTER_NAME}} {{.KUBECONFIG_PATH}}

  setup-cert-manager:
    desc: Deploy cert-manager and configure ClusterIssuer with mkcert CA
    silent: true
    cmds:
      - echo "üîÑ Setting up cert-manager..."
      - |
        echo "  üì¶ Installing/upgrading cert-manager..."
        helmfile --file {{.K8S_DIR}}/config/helmfile.yaml \
          --selector name=cert-manager \
          apply --kubeconfig {{.KUBECONFIG_PATH}} --skip-diff-on-install --suppress-diff
      - |
        # Wait for cert-manager pods to be ready before setting up the issuer
        echo "‚è≥ Waiting for cert-manager webhook..."
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} wait --namespace cert-manager \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=webhook \
          --timeout=90s || {
            echo "‚ùå Timeout waiting for cert-manager webhook"
            exit 1
          }
        sleep 5  # Give cert-manager a moment to establish its CRDs

        # Create namespace if it doesn't exist
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} create namespace cert-manager --dry-run=client -o yaml | \
          kubectl --kubeconfig {{.KUBECONFIG_PATH}} apply -f -

        # Create or update CA secret
        echo "üì¶ Creating/updating mkcert CA secret..."
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} create secret generic mkcert-ca-secret \
          --namespace cert-manager \
          --from-file=tls.crt={{.K8S_DIR}}/certs/rootCA.pem \
          --from-file=tls.key={{.K8S_DIR}}/certs/rootCA-key.pem \
          --dry-run=client -o yaml | \
          kubectl --kubeconfig {{.KUBECONFIG_PATH}} apply -f -

        # Apply the ClusterIssuer
        echo "üîß Creating/updating ClusterIssuer..."
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} apply -f {{.K8S_DIR}}/config/cluster-issuer.yaml

        # Verify ClusterIssuer is ready
        echo "‚è≥ Waiting for ClusterIssuer to be ready..."
        for i in $(seq 1 30); do
          if kubectl --kubeconfig {{.KUBECONFIG_PATH}} get clusterissuer mkcert-issuer -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; then
            echo "‚úÖ ClusterIssuer is ready"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Timeout waiting for ClusterIssuer to be ready"
            exit 1
          fi
          sleep 2
        done
      - echo "‚úÖ cert-manager setup complete"
    status:
      - |
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} get secret mkcert-ca-secret -n cert-manager >/dev/null 2>&1 && \
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} get clusterissuer mkcert-issuer >/dev/null 2>&1 && \
        kubectl --kubeconfig {{.KUBECONFIG_PATH}} get clusterissuer mkcert-issuer -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q "True"

  deploy-services:
    desc: Deploy remaining services using helmfile
    silent: true
    deps: [setup-cert-manager]
    cmds:
      - echo "üîÑ Deploying services..."
      - |
        echo "  üì¶ Installing/upgrading Helm charts for enabled services..."
        helmfile --file {{.K8S_DIR}}/config/helmfile.yaml \
          --selector 'name!=cert-manager' \
          apply --kubeconfig {{.KUBECONFIG_PATH}} --skip-diff-on-install --suppress-diff
      - echo "‚úÖ Services deployed successfully"
    status:
      - helmfile --file {{.K8S_DIR}}/config/helmfile.yaml status --kubeconfig {{.KUBECONFIG_PATH}}

  label-worker-nodes:
    desc: "Label worker/agent nodes with node-role.kubernetes.io/worker=true"
    silent: true
    cmds:
      - |
        echo "üîÑ Labeling worker nodes..."
        for ((i=0; i<{{.WORKERS}}; i++)); do
          if [ $i -eq 0 ]; then
            NODE_NAME="{{.CLUSTER_NAME}}-worker"
          else
            NODE_NAME="{{.CLUSTER_NAME}}-worker$((i+1))"
          fi
          if ! kubectl --kubeconfig {{.KUBECONFIG_PATH}} get node ${NODE_NAME} -o jsonpath='{.metadata.labels}' | grep -q 'node-role\.kubernetes\.io/worker'; then
            kubectl --kubeconfig {{.KUBECONFIG_PATH}} label node ${NODE_NAME} node-role.kubernetes.io/worker=true --overwrite
            echo "‚úÖ Labeled node ${NODE_NAME} as worker"
          else
            echo "‚ÑπÔ∏è Node ${NODE_NAME} is already labeled as worker"
          fi
        done
    status:
      - |
        LABELED_COUNT=0
        for ((i=0; i<{{.WORKERS}}; i++)); do
          if [ $i -eq 0 ]; then
            NODE_NAME="{{.CLUSTER_NAME}}-worker"
          else
            NODE_NAME="{{.CLUSTER_NAME}}-worker$((i+1))"
          fi
          if kubectl --kubeconfig {{.KUBECONFIG_PATH}} get node ${NODE_NAME} -o jsonpath='{.metadata.labels}' | grep -q 'node-role\.kubernetes\.io/worker'; then
            ((LABELED_COUNT++))
          fi
        done
        [ "$LABELED_COUNT" -eq "{{.WORKERS}}" ]

  fetch-service-secrets:
    desc: Fetch secrets for enabled services
    silent: true
    cmds:
      - echo "üîÑ Fetching service secrets..."
      - |
        if [ "{{.USE_SERVICE_PRESETS}}" = "true" ]; then
          # Get list of enabled services first
          ENABLED_SERVICES=($(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}}))
          
          # Check if there are any enabled services
          if [ ${#ENABLED_SERVICES[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è No enabled services found. No secrets to fetch."
            exit 0
          fi
          
          # Check if any enabled services are password-protected
          HAS_PROTECTED_SERVICES=false
          for SERVICE in "${ENABLED_SERVICES[@]}"; do
            IS_PROTECTED=$(yq e ".service_auth_presets.$SERVICE.password-protected" {{.ROOT_DIR}}/templates/service_presets.yaml)
            if [ "$IS_PROTECTED" = "true" ]; then
              HAS_PROTECTED_SERVICES=true
              break
            fi
          done
          
          if [ "$HAS_PROTECTED_SERVICES" = "false" ]; then
            echo "‚ÑπÔ∏è No password-protected services found among enabled services. No secrets to fetch."
            exit 0
          fi
          
          OUTPUT_FILE="{{.K8S_DIR}}/service-secrets.txt"
          > $OUTPUT_FILE  # Clear the file before writing

          # Get all helm releases and their namespaces
          echo "  üîç Getting Helm release information..."
          
          # Get namespaces for each service using kubectl
          declare -A SERVICE_NAMESPACES
          for SERVICE in "${ENABLED_SERVICES[@]}"; do
            # Try to find the service's namespace using kubectl
            NAMESPACE=$(kubectl --kubeconfig {{.KUBECONFIG_PATH}} get pods --all-namespaces -l "app.kubernetes.io/name=$SERVICE" -o jsonpath='{.items[0].metadata.namespace}' 2>/dev/null)
            if [ -n "$NAMESPACE" ]; then
              SERVICE_NAMESPACES[$SERVICE]=$NAMESPACE
              echo "    Found service: $SERVICE in namespace: $NAMESPACE"
            fi
          done

          for SERVICE in "${ENABLED_SERVICES[@]}"; do
            # Check if service is password-protected in presets
            IS_PROTECTED=$(yq e ".service_auth_presets.$SERVICE.password-protected" {{.ROOT_DIR}}/templates/service_presets.yaml)
            if [ "$IS_PROTECTED" = "true" ]; then
              # Get secret name and field from presets
              SECRET_NAME=$(yq e ".service_auth_presets.$SERVICE.secret-name" {{.ROOT_DIR}}/templates/service_presets.yaml)
              PASSWORD_FIELD=$(yq e ".service_auth_presets.$SERVICE.password-field" {{.ROOT_DIR}}/templates/service_presets.yaml)
              
              # Use the actual namespace from Helm release
              NAMESPACE="${SERVICE_NAMESPACES[$SERVICE]}"
              if [ -z "$NAMESPACE" ]; then
                echo "‚ö†Ô∏è Could not find namespace for service $SERVICE, skipping..."
                continue
              fi
              echo "  üì¶ Fetching secret for $SERVICE from namespace $NAMESPACE..."
              
              PASSWORD=$(kubectl get secret $SECRET_NAME -n $NAMESPACE -o jsonpath="{.data.$PASSWORD_FIELD}" | base64 --decode)
              if [ -n "$PASSWORD" ]; then
                echo "Service $SERVICE (namespace: $NAMESPACE), Password: $PASSWORD" >> $OUTPUT_FILE
              else
                echo "‚ö†Ô∏è Could not fetch password for service $SERVICE"
              fi
            fi
          done

          if [ -s "$OUTPUT_FILE" ]; then
            echo "üîë Passwords for enabled password-protected services have been written to $OUTPUT_FILE"
            echo "üîë Service secrets:"
            cat $OUTPUT_FILE
            echo "‚úÖ Service secrets fetched successfully"
          else
            echo "‚ö†Ô∏è Failed to fetch any service secrets. Check if secrets exist in the cluster."
          fi
        else
          echo "‚ÑπÔ∏è Service presets are disabled (use-service-presets: false)"
          echo "üëâ You are responsible for managing service secrets."
          echo "   Refer to each service's helm chart documentation for configuration"
        fi

  create-cluster:
    desc: Create a new {{.PROVIDER}} cluster
    silent: true
    status:
      - test -f {{.K8S_DIR}}/config/cluster.yaml
      - |
        {{.PROVIDER_BINARY}} get clusters | grep -q {{.CLUSTER_NAME}}
    cmds:
      - echo "üîÑ Creating {{.PROVIDER}} cluster '{{.CLUSTER_NAME}}'..."
      - |
        {{.PROVIDER_BINARY}} create cluster --config {{.K8S_DIR}}/config/cluster.yaml --name {{.CLUSTER_NAME}}
      - echo "‚úÖ {{.PROVIDER_BINARY}} cluster '{{.CLUSTER_NAME}}' created successfully"

  delete-cluster:
    desc: Delete the kubernetes cluster
    silent: true
    cmds:
      - |
        {{.PROVIDER_BINARY}} delete cluster --name {{.CLUSTER_NAME}}

  recreate-cluster:
    desc: Recreate the kubernetes cluster
    silent: true
    cmds:
      - task: delete-cluster
      - task: create-cluster

  set-control-plane-scheduling:
    desc: "Set scheduling on control plane nodes"
    silent: true
    cmds:
      - |
        if [ "{{.ALLOW_CP_SCHEDULING}}" = "true" ]; then
          echo "üîÑ Enabling scheduling on control plane nodes..."
          # Remove taint if it exists, suppress errors
          kubectl --kubeconfig {{.KUBECONFIG_PATH}} taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule- 2>/dev/null || true
          echo "‚úÖ Scheduling enabled on control plane nodes"
        else
          echo "üîÑ Disabling scheduling on control plane nodes..."
          kubectl --kubeconfig {{.KUBECONFIG_PATH}} taint nodes --selector node-role.kubernetes.io/control-plane node-role.kubernetes.io/control-plane:NoSchedule
          echo "‚úÖ Scheduling disabled on control plane nodes"
        fi

  list-nodes:
    desc: List cluster nodes
    silent: true
    cmds:
      - echo "üîÑ Listing cluster nodes..."
      - kubectl --kubeconfig {{.KUBECONFIG_PATH}} get nodes
      - echo "‚úÖ Node list complete"
