# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  CR_TEST_IMAGE_TAG:
    sh: |
      cd {{.ROOT_DIR}}/tests/registry && cat ep.sh Dockerfile | sha256sum | cut -c1-8

tasks:
  default: task --list --taskfile "{{.ROOT_DIR}}/.taskfiles/validate/Taskfile.yaml"

  build-push-image:
    desc: Builds and pushes a sample image to the local registry
    silent: true
    vars:
      IMAGE_EXISTS:
        sh: |
          if {{.RUNTIME_BINARY}} manifest inspect {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.IMAGE_TAG}} >/dev/null 2>&1; then
            echo "true"
          else
            echo "false"
          fi
    cmds:
      - |
        if [ "{{.IMAGE_EXISTS}}" = "true" ]; then
          echo "‚ÑπÔ∏è Image {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.IMAGE_TAG}} already exists in registry"
        else
          echo "üîÑ Building and pushing a sample image to local registry..."
          {{.RUNTIME_BINARY}} build {{.REG_TEST_DIR}} -t {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.IMAGE_TAG}} >/dev/null
          {{.RUNTIME_BINARY}} push {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.IMAGE_TAG}} >/dev/null
          echo "‚úÖ Sample image built and pushed successfully"
        fi

  deploy-test-app:
    desc: Deploy a sample Helm release using an image from the local registry
    silent: true
    cmds:
      - |
        if helm get values {{.REGISTRY_NAME}}-test -n default -o yaml 2>/dev/null | grep -q "tag: {{.IMAGE_TAG}}"; then
          echo "‚ÑπÔ∏è Helm release {{.REGISTRY_NAME}}-test with image tag {{.IMAGE_TAG}} already deployed"
        else
          echo "üîÑ Deploying a test app Helm release based on image tag {{.IMAGE_TAG}}..."
          helm upgrade --install --wait {{.REGISTRY_NAME}}-test bjw-s/app-template \
            --version {{.APP_TEMPLATE_VERSION}} --namespace default \
            --values <(cat << EOF
        controllers:
          main:
            type: deployment
            strategy: RollingUpdate
            containers:
              main:
                image:
                  repository: {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test
                  tag: {{.IMAGE_TAG}}
                env:
                  - name: IMAGE_TAG
                    value: {{.IMAGE_TAG}}
        service:
          main:
            controller: main
            ports:
              http:
                port: 80
        ingress:
          main:
            enabled: true
            className: nginx
            annotations:
              cert-manager.io/cluster-issuer: "mkcert-issuer"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
              cert-manager.io/duration: "72h"
              cert-manager.io/renew-before: "36h"
            hosts:
              - host: {{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}}
                paths:
                  - path: /
                    pathType: Prefix
                    service:
                      identifier: main
                      port: http
            tls:
              - secretName: {{.REGISTRY_NAME}}-test-tls
                hosts:
                  - {{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}}
        EOF
        )
          echo "‚úÖ Test app Helm release based on image tag {{.IMAGE_TAG}} deployed successfully"
        fi

  undeploy-test-app:
    desc: Undeploy the test app Helm release
    silent: true
    cmds:
      - echo "üîÑ Undeploying sample app helm release..."
      - |
        if helm status {{.REGISTRY_NAME}}-test -n default >/dev/null 2>&1; then
          echo "  ‚è≥ Uninstalling helm release '{{.REGISTRY_NAME}}-test'..."
          helm uninstall {{.REGISTRY_NAME}}-test -n default
          echo "  ‚úÖ Helm release '{{.REGISTRY_NAME}}-test' uninstalled"
        else
          echo "‚ÑπÔ∏è Helm release '{{.REGISTRY_NAME}}-test' is not installed"
        fi
      - echo "‚úÖ Sample app helm release undeployed"

  local-registry:
    desc: "Validates local registry by building and pushing an image, then deploying a Helm release using that image"
    cmds:
      - task: build-push-image
        vars: { IMAGE_TAG: '{{.CR_TEST_IMAGE_TAG}}' }
      - task: deploy-test-app
        vars: { IMAGE_TAG: '{{.CR_TEST_IMAGE_TAG}}' }

  app:
    desc: Validates sample app deployed via Helm release from local registry
    silent: true
    vars:
      TEST_NAME: "{{.REGISTRY_NAME}}-test"
    cmds:
      - echo "üîÑ Validating sample application..."
      - sleep 5
      - echo -e "\nüåê Registry Test (https://{{.TEST_NAME}}.{{.LOCAL_DOMAIN}}/):\n"
      - curl -s https://{{.TEST_NAME}}.{{.LOCAL_DOMAIN}}/
      - echo "‚úÖ Sample application validation complete"

  tcp-services-external:
    desc: "Validate TCP services are reachable from the local machine"
    silent: true
    cmds:
      - |
        echo "üîç Checking for enabled TCP services..."
        if [ $(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}} | wc -l) -eq 0 ]; then
          echo "‚ÑπÔ∏è  No TCP services are enabled. Skipping external validation."
          exit 0
        fi
        
        echo "üîç Validating enabled TCP services from the local machine:"
        FAILED=0
        ENABLED_SERVICES=($(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}}))
        for service in "${ENABLED_SERVICES[@]}"; do
          ports=($(yq e ".environment.services[] | select(.name == \"$service\") | .ports[]" {{.CONFIG_FILE}}))
          for port in "${ports[@]}"; do
            echo "  üîÑ Validating $service on port $port..."
            if nc -zv $service.{{.LOCAL_DOMAIN}} $port -w 5 2>&1 | grep -qE 'open|succeeded|Connected'; then
              echo "  ‚úÖ $service.{{.LOCAL_DOMAIN}} is reachable on port $port"
            else
              echo "  ‚ùå $service.{{.LOCAL_DOMAIN}} is NOT reachable on port $port"
              FAILED=1
            fi
          done
        done
        
        if [ $FAILED -eq 1 ]; then
          echo "‚ùå Some services are not reachable from the local machine"
          exit 1
        fi
        echo "‚úÖ All services are reachable from the local machine"

  tcp-services-internal:
    desc: "Validate TCP services are reachable from inside the cluster"
    silent: true
    cmds:
      - |
        echo "üîç Checking for enabled TCP services..."
        if [ $(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}} | wc -l) -eq 0 ]; then
          echo "‚ÑπÔ∏è  No TCP services are enabled. Skipping internal validation."
          exit 0
        fi
        
        echo "üîç Validating enabled TCP services from inside the cluster:"
        # Create temporary pod for testing
        cat << EOF | kubectl apply -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: netcat-internal-test
          namespace: default
        spec:
          containers:
          - name: netcat
            image: busybox
            command: ["sleep", "300"]
          restartPolicy: Never
        EOF
        
        # Wait for pod to be ready
        echo "  ‚è≥ Waiting for test pod to be ready..."
        kubectl wait --for=condition=ready pod/netcat-internal-test -n default --timeout=180s
        
        # Test each service
        FAILED=0
        ENABLED_SERVICES=($(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}}))
        for service in "${ENABLED_SERVICES[@]}"; do
          ports=($(yq e ".environment.services[] | select(.name == \"$service\") | .ports[]" {{.CONFIG_FILE}}))
          for port in "${ports[@]}"; do
            echo "  üîÑ Validating $service on port $port..."
            if kubectl exec -n default netcat-internal-test -- nc -zv $service.{{.LOCAL_DOMAIN}} $port -w 5 2>&1 | grep -qE 'open|succeeded|Connected'; then
              echo "  ‚úÖ $service.{{.LOCAL_DOMAIN}} is reachable on port $port"
            else
              echo "  ‚ùå $service.{{.LOCAL_DOMAIN}} is NOT reachable on port $port"
              FAILED=1
            fi
          done
        done
        
        # Clean up
        kubectl delete pod netcat-internal-test -n default --force --grace-period=0
        
        if [ $FAILED -eq 1 ]; then
          echo "‚ùå Some services are not reachable from inside the cluster"
          exit 1
        fi
        echo "‚úÖ All services are reachable from inside the cluster"

  tcp-services:
    desc: "Validate TCP services are reachable both from the local machine and from inside the cluster"
    silent: true
    cmds:
      - task: tcp-services-external
      - task: tcp-services-internal
