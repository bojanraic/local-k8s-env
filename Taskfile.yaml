# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

includes:
  vars: .taskfiles/vars
  kubernetes: .taskfiles/kubernetes
  validate: .taskfiles/validate
  help: .taskfiles/help

tasks:
  ensure-basic-tools:
    desc: Ensure basic tools are installed
    internal: true
    silent: true
    cmds:
      - |
        echo "🔄 Ensuring basic tools are installed..."
        mise install task yq
        mise use task yq
    status:
      - command -v task >/dev/null 2>&1
      - command -v yq >/dev/null 2>&1

  check-deps:
    desc: Check and install required dependencies
    silent: true
    deps: [ensure-basic-tools]
    cmds:
      - echo "🔄 Checking dependencies..."
      - echo "  ⚙️ Installing mise tools..."
      - mise install
      - echo "  ⚙️ Installing Python dependencies..."
      - mise run deps
      - echo "✅ All dependencies installed"
      - echo "  ⚙️ Configuring shell completions..."
      - task: help:setup-completions
      - echo "  👉 Please restart your shell or source your shell rc file to enable completions"
      - echo "  ✅ Done configuring shell completions"
      - echo "✅ Done checking dependencies"
    status:
      - test -f {{.VENV}}/pyvenv.cfg

  check-runtime:
    desc: Check if container runtime is running
    silent: true
    cmds:
      - |
        echo "🔍 Checking if {{.RUNTIME}} is running..."
        if ! {{.RUNTIME_BINARY}} info >/dev/null 2>&1; then
          echo "❌ {{.RUNTIME}} is not running. Please start {{.RUNTIME}} and try again."
          exit 1
        fi
        echo "✅ {{.RUNTIME}} is running"
    status:
      - "{{.RUNTIME_BINARY}} info >/dev/null 2>&1"

  init:
    desc: Initialize the local environment
    silent: true
    deps: [check-deps, check-runtime]
    cmds:
      - task: generate-dirs
      - task: generate-configs
      - task: setup-certificates
      - task: ensure-network
      - task: setup-dnsmasq
    status:
      - test -d "{{.K8S_DIR}}/config"
      - test -f "{{.K8S_DIR}}/config/cluster.yaml"

  generate-dirs:
    desc: Create necessary directories
    silent: true
    cmds:
      - echo "🔄 Creating directories..."
      - |
        if [ {{.SERVERS}} -ge 1 ]; then
          echo "  📁 Creating control plane directories..."
          for i in $(seq 0 $(expr {{.SERVERS}} - 1)); do
            mkdir -p {{.K8S_DIR}}/logs/control-$i
            mkdir -p {{.K8S_DIR}}/storage/control-$i
          done
        fi
        if [ {{.WORKERS}} -ge 1 ]; then
          echo "  📁 Creating worker node directories..."
          for i in $(seq 0 $(expr {{.WORKERS}} - 1)); do
            mkdir -p {{.K8S_DIR}}/logs/worker-$i
            mkdir -p {{.K8S_DIR}}/storage/worker-$i
          done
        fi
      - mkdir -p {{.K8S_DIR}}/config
      - echo "✅ Directories created"

  generate-configs:
    desc: Generate all configuration files
    silent: true
    cmds:
      - echo "🔄 Generating configuration files..."
      - "{{.VENV}}/bin/python3 ./generate_configs.py '{{.CONFIG_FILE}}' '{{.OS}}'"
      - echo "✅ Configuration files generated"
    sources:
      - k8s-env.yaml
    generates:
      - '{{.K8S_DIR}}/config/cluster.yaml'
      - '{{.K8S_DIR}}/config/containerd.yaml'
      - '{{.K8S_DIR}}/config/dnsmasq.conf'
      - '{{.K8S_DIR}}/config/helmfile.yaml'

  setup-certificates:
    desc: Setup mkcert certificates
    silent: true
    cmds:
      - echo "🔄 Setting up certificates..."
      - mkdir -p {{.CERT_DIR}}
      - mkcert -install
      - |
        if [ ! -f {{.CERT_FILE}} ]; then
          echo "  🔐 Generating certificates using mkcert..."
          mkcert -cert-file {{.CERT_FILE}} -key-file {{.KEY_FILE}} "*.{{.LOCAL_DOMAIN}}" "{{.LOCAL_DOMAIN}}"
        fi
      - cp "$(mkcert -CAROOT)/rootCA.pem" {{.CERT_DIR}}/rootCA.pem
      - cat {{.CERT_FILE}} {{.KEY_FILE}} > {{.COMBINED_FILE}}
      - |
        echo "  📁 Setting up containerd registry certificates..."
        mkdir -p {{.CONTAINERD_CERT_DIR}}
        cp {{.CERT_DIR}}/rootCA.pem {{.CONTAINERD_CERT_DIR}}/ca.crt
      - echo "✅ Certificates setup complete"
    status:
      - test -f "{{.ROOT_CA_PATH}}/rootCA.pem"
      - test -f {{.CERT_DIR}}/rootCA.pem
      - test -f {{.CERT_FILE}}
      - test -f {{.KEY_FILE}}
      - test -f {{.COMBINED_FILE}}
      - test -f {{.CONTAINERD_CERT_DIR}}/ca.crt

  setup-dnsmasq:
    desc: Setup dnsmasq configuration
    silent: true
    cmds:
      - echo "🔄 Setting up dnsmasq..."
      # Create resolver configuration
      - sudo mkdir -p {{.RESOLVER_DIR}}
      - |
        echo "nameserver {{.LOCAL_IP}}" | sudo tee {{.RESOLVER_FILE}} > /dev/null
        echo "port {{.DNS_PORT}}" | sudo tee -a {{.RESOLVER_FILE}} > /dev/null
      - |
        if [[ "$(echo {{.OS}} | tr '[:upper]' '[:lower:]')" == "darwin" ]]; then
          sudo chown root:wheel {{.RESOLVER_FILE}}
        else
          sudo chown root:root {{.RESOLVER_FILE}}
        fi
      - sudo chmod 644 {{.RESOLVER_FILE}}
      - echo "✅ Dnsmasq setup complete"
    status:
      - test -f {{.K8S_DIR}}/config/dnsmasq.conf
      - test -f {{.RESOLVER_FILE}}

  start-dnsmasq:
    desc: Start dnsmasq container
    silent: true
    cmds:
      - echo "🔄 Starting DNS service..."
      - |
        if [ -z "$({{.RUNTIME_BINARY}} ps -q -f name={{.DNS_CONTAINER_NAME}})" ]; then
          echo "  🚀 Starting dnsmasq container..."
          {{.RUNTIME_BINARY}} run -d --name {{.DNS_CONTAINER_NAME}} \
            --network {{.CONTAINER_NETWORK_NAME}} \
            --restart unless-stopped \
            -p 53:53/udp \
            -p 53:53/tcp \
            -v "{{.K8S_DIR}}/config/dnsmasq.conf":"/etc/dnsmasq.conf:ro" \
            dockurr/dnsmasq:{{.DNSMASQ_VERSION}}
        else
          echo "  ℹ️ Reloading DNS configuration..."
          {{.RUNTIME_BINARY}} cp {{.K8S_DIR}}/config/dnsmasq.conf {{.DNS_CONTAINER_NAME}}:/etc/dnsmasq.conf
          {{.RUNTIME_BINARY}} restart {{.DNS_CONTAINER_NAME}}
        fi
      - |
        echo "  🔍 Verifying DNS resolution..."
        if ! dig @{{.LOCAL_IP}} -p {{.DNS_PORT}} test.{{.LOCAL_DOMAIN}} | grep -q "{{.LOCAL_IP}}"; then
          echo "❌ DNS resolution verification failed"
          exit 1
        else
          dig @{{.LOCAL_IP}} -p {{.DNS_PORT}} test.{{.LOCAL_DOMAIN}} | grep "{{.LOCAL_IP}}"
          echo "✅ DNS service ready"
        fi
    status:
      - |
        # Check if container exists and is running with current config
        CONTAINER_ID=$({{.RUNTIME_BINARY}} ps -q -f name={{.DNS_CONTAINER_NAME}} -f status=running) && \
        test -n "$CONTAINER_ID" && \
        {{.RUNTIME_BINARY}} diff {{.DNS_CONTAINER_NAME}} | grep -q "^C /etc/dnsmasq.conf$" && \
        dig @{{.LOCAL_IP}} -p {{.DNS_PORT}} test.{{.LOCAL_DOMAIN}} | grep -q "{{.LOCAL_IP}}"

  inject-dns-nameserver:
    desc: Inject DNS container IP into cluster nodes' resolv.conf
    silent: true
    cmds:
      - echo "🔄 Injecting DNS container IP into cluster nodes..."
      - |
        # Get DNS container IP
        DNS_IP=$({{.RUNTIME_BINARY}} inspect {{.DNS_CONTAINER_NAME}} --format='{{`{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}`}}')
        if [ -z "$DNS_IP" ]; then
          echo "❌ Failed to get DNS container IP"
          exit 1
        fi

        # Get all cluster nodes (excluding DNS and load balancer containers)
        DNS_ID=$({{.RUNTIME_BINARY}} ps -q --filter "name={{.DNS_CONTAINER_NAME}}")
        NODES=$({{.RUNTIME_BINARY}} ps -q --filter "name={{.CLUSTER_NAME}}")

        # Remove DNS container from nodes list
        NODES=$(echo "$NODES" | grep -v "$DNS_ID")

        # Remove load balancer if it exists
        LB_ID=$({{.RUNTIME_BINARY}} ps -q --filter "name={{.KIND_LB_CONTAINER_NAME}}")
        if [ -n "$LB_ID" ]; then
          NODES=$(echo "$NODES" | grep -v "$LB_ID")
        fi

        for NODE in $NODES; do
          NODE_NAME=$({{.RUNTIME_BINARY}} inspect $NODE --format='{{`{{.Name}}`}}' | sed 's/\///')
          echo "  📝 Updating DNS for node: $NODE_NAME"
          {{.RUNTIME_BINARY}} exec $NODE /bin/sh -c "if ! grep -q '^nameserver $DNS_IP$' /etc/resolv.conf; then awk '/^[^#]/{if(!p){print \"nameserver '$DNS_IP'\";p=1}}1' /etc/resolv.conf > /tmp/resolv.new && cat /tmp/resolv.new > /etc/resolv.conf; fi"
        done
      - echo "✅ DNS nameserver injection complete"

  create-env:
    desc: Creates the local environment
    silent: true
    deps: [check-runtime]
    cmds:
      - task: init
      - task: start-dnsmasq
      - task: kubernetes:create-cluster
      - task: kubernetes:fetch-kubeconfig
      - task: inject-dns-nameserver
      - task: kubernetes:wait-for-ready
      - task: kubernetes:set-control-plane-scheduling
      - task: kubernetes:label-worker-nodes
      - task: kubernetes:list-nodes
      - task: kubernetes:create-wildcard-cert
      - task: kubernetes:deploy-services
      - task: kubernetes:fetch-service-secrets

  stop-env:
    desc: Stop the local environment
    silent: true
    deps: [check-runtime]
    cmds:
      - echo "🔄 Stopping cluster '{{.CLUSTER_NAME}}'..."
      - |
        # Check if all containers are already stopped
        CONTAINERS=$({{.RUNTIME_BINARY}} ps -a --filter "name={{.CLUSTER_NAME}}" --format '{{`{{.Names}}`}}' | sort -u)
        ALL_STOPPED=true

        for CONTAINER in $CONTAINERS; do
          if {{.RUNTIME_BINARY}} ps --filter "name=$CONTAINER" --filter "status=running" -q | grep -q .; then
            ALL_STOPPED=false
            break
          fi
        done

        if [ "$ALL_STOPPED" = "true" ]; then
          echo "ℹ️ Cluster '{{.CLUSTER_NAME}}' is already stopped"
          exit 0
        fi

        echo "  🔄 Stopping all '{{.CLUSTER_NAME}}'-related containers..."
        for CONTAINER in $CONTAINERS; do
          echo "    ⏳ Stopping $CONTAINER..."
          {{.RUNTIME_BINARY}} stop $CONTAINER >/dev/null 2>&1 || true
          echo "    ✅ Stopped $CONTAINER"
        done
        echo "  ✅ Stopped all '{{.CLUSTER_NAME}}'-related containers"
        echo "✅ Stopped cluster '{{.CLUSTER_NAME}}'"

  start-env:
    desc: Start the local environment
    silent: true
    deps: [check-runtime]
    cmds:
      - echo "🔄 Starting cluster '{{.CLUSTER_NAME}}'..."
      - |
        # Check if all containers are already running
        CONTAINERS=$({{.RUNTIME_BINARY}} ps -a --filter "name={{.CLUSTER_NAME}}" --format '{{`{{.Names}}`}}' | sort -u)
        ALL_RUNNING=true

        for CONTAINER in $CONTAINERS; do
          if ! {{.RUNTIME_BINARY}} ps --filter "name=$CONTAINER" --filter "status=running" -q | grep -q .; then
            ALL_RUNNING=false
            break
          fi
        done

        if [ "$ALL_RUNNING" = "true" ]; then
          echo "ℹ️ Cluster '{{.CLUSTER_NAME}}' is already running"
          exit 0
        fi

        echo "  🔄 Starting all '{{.CLUSTER_NAME}}'-related containers..."
        for CONTAINER in $CONTAINERS; do
          echo "    ⏳ Starting $CONTAINER..."
          {{.RUNTIME_BINARY}} start $CONTAINER >/dev/null 2>&1 || true
          echo "    ✅ Started $CONTAINER"
        done
        echo "  ✅ Started all '{{.CLUSTER_NAME}}'-related containers"
        sleep 3
        echo "✅ Started cluster '{{.CLUSTER_NAME}}'"

  destroy-env:
    desc: Destroy the local environment
    silent: true
    deps: [check-runtime]
    cmds:
      - echo "🔄 Destroying local environment '{{.ENV_NAME}}'..."
      - task: stop-env
      - |
        # Remove DNS container if exists
        if [ -n "$({{.RUNTIME_BINARY}} ps -aq -f name={{.DNS_CONTAINER_NAME}})" ]; then
          {{.RUNTIME_BINARY}} rm -f {{.DNS_CONTAINER_NAME}}
        fi
      - |
        # Remove LB container if exists
        if [ -n "$({{.RUNTIME_BINARY}} ps -aq -f name={{.KIND_LB_CONTAINER_NAME}})" ]; then
          {{.RUNTIME_BINARY}} rm -f {{.KIND_LB_CONTAINER_NAME}}
        fi
      - |
        {{.PROVIDER_BINARY}} delete cluster --name {{.CLUSTER_NAME}}
      - |
        if [[ "$(echo {{.OS}} | tr '[:upper:]' '[:lower:]')" == "darwin" ]]; then
          sudo rm -f /etc/resolver/{{.LOCAL_DOMAIN}}
          rm -rf {{.K8S_DIR}}
        elif [[ "$(echo {{.OS}} | tr '[:upper:]' '[:lower:]')" == "linux" ]]; then
          sudo rm -f /etc/systemd/resolved.conf.d/{{.LOCAL_DOMAIN}}.conf
          sleep 2
          sudo systemctl restart systemd-resolved
          sudo rm -rf {{.K8S_DIR}}
        else
          echo "Unsupported OS: {{.OS}}"
        fi
      - echo "✅ Local environment '{{.ENV_NAME}}' destroyed"

  recreate-env:
    desc: Recreate the local environment
    silent: true
    cmds:
      - task: destroy-env
      - task: create-env

  validate-env:
    desc: Validate the local environment
    silent: true
    cmds:
      - task: validate:tcp-services
      - task: validate:local-registry
      - task: validate:app

  create-validate-env:
    desc: Create a clean local environment and validate it
    silent: true
    cmds:
      - task: recreate-env
      - task: validate-env

  clean-env:
    desc: Clean up the local environment
    silent: true
    cmds:
      - task: destroy-env
      - rm -rf {{.VENV}}

  ensure-network:
    desc: Ensure the container network exists
    silent: true
    cmds:
      - echo "🔄 Checking for '{{.CONTAINER_NETWORK_NAME}}' network..."
      - |
        if ! {{.RUNTIME_BINARY}} network ls --format '{{`{{.Name}}`}}' | grep -q '^{{.CONTAINER_NETWORK_NAME}}$'; then
          echo "  🔄 Creating '{{.CONTAINER_NETWORK_NAME}}' network..."
          {{.RUNTIME_BINARY}} network create {{.CONTAINER_NETWORK_NAME}}
          echo "  ✅ '{{.CONTAINER_NETWORK_NAME}}' network created"
        else
          echo "ℹ️ '{{.CONTAINER_NETWORK_NAME}}' network already exists"
        fi

  default: task --list
