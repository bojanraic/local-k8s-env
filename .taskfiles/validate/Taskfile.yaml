# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  CR_TEST_IMAGE_TAG:
    sh: |
      cd {{.ROOT_DIR}}/tests/registry && cat ep.sh Dockerfile | sha256sum | cut -c1-8

tasks:
  default: task --list --taskfile "{{.ROOT_DIR}}/.taskfiles/validate/Taskfile.yaml"

  build-push-image:
    desc: Builds and pushes a sample image to the local registry
    silent: true
    vars:
      EFFECTIVE_IMAGE_TAG: '{{.IMAGE_TAG | default .CR_TEST_IMAGE_TAG}}'
      IMAGE_EXISTS:
        sh: |
          if {{.RUNTIME_BINARY}} manifest inspect {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.EFFECTIVE_IMAGE_TAG}} >/dev/null 2>&1; then
            echo "true"
          else
            echo "false"
          fi
    cmds:
      - |
        if [ "{{.IMAGE_EXISTS}}" = "true" ]; then
          echo "‚ÑπÔ∏è Image {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.EFFECTIVE_IMAGE_TAG}} already exists in registry"
        else
          echo "üîÑ Building and pushing a sample image to local registry..."
          {{.RUNTIME_BINARY}} build {{.REG_TEST_DIR}} -t {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.EFFECTIVE_IMAGE_TAG}} -t {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:latest >/dev/null
          {{.RUNTIME_BINARY}} push {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:{{.EFFECTIVE_IMAGE_TAG}} >/dev/null
          {{.RUNTIME_BINARY}} push {{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test:latest >/dev/null
          echo "‚úÖ Sample image built and pushed successfully with tags {{.EFFECTIVE_IMAGE_TAG}} and latest"
        fi

  package-helm-chart:
    desc: Package the demo-app Helm chart as an OCI artifact and push to local registry
    silent: true
    vars:
      CHART_VERSION:
        sh: yq e '.version' {{.REG_TEST_DIR}}/helm-chart/Chart.yaml
      CHART_NAME:
        sh: yq e '.name' {{.REG_TEST_DIR}}/helm-chart/Chart.yaml
    cmds:
      - |
        echo "üîÑ Packaging Helm chart as OCI artifact..."
        
        # Package the chart directly
        echo "  üì¶ Packaging Helm chart..."
        helm package {{.REG_TEST_DIR}}/helm-chart --destination /tmp
        
        # Push to OCI registry
        echo "  üöÄ Pushing chart to OCI registry..."
        helm push /tmp/{{.CHART_NAME}}-{{.CHART_VERSION}}.tgz oci://{{.REGISTRY_HOST}}/helm-charts
        
        # Clean up
        rm -f /tmp/{{.CHART_NAME}}-{{.CHART_VERSION}}.tgz
        
        echo "‚úÖ Helm chart packaged and pushed to oci://{{.REGISTRY_HOST}}/helm-charts/{{.CHART_NAME}}:{{.CHART_VERSION}}"

  deploy-demo-app:
    desc: Deploy the demo-app from OCI registry
    silent: true
    vars:
      CHART_VERSION:
        sh: yq e '.version' {{.REG_TEST_DIR}}/helm-chart/Chart.yaml
      CHART_NAME:
        sh: yq e '.name' {{.REG_TEST_DIR}}/helm-chart/Chart.yaml
      RELEASE_NAME: "{{.REGISTRY_NAME}}-test"
      EFFECTIVE_IMAGE_TAG: '{{.IMAGE_TAG | default .CR_TEST_IMAGE_TAG}}'
    cmds:
      - |
        if helm get values {{.RELEASE_NAME}} -n default -o yaml 2>/dev/null | grep -q "tag: {{.EFFECTIVE_IMAGE_TAG}}"; then
          echo "‚ÑπÔ∏è Helm release {{.RELEASE_NAME}} with image tag {{.EFFECTIVE_IMAGE_TAG}} already deployed"
        else
          echo "üîÑ Deploying demo-app from OCI registry..."
          
          # Install/upgrade from OCI registry
          helm upgrade --install --wait {{.RELEASE_NAME}} \
            oci://{{.REGISTRY_HOST}}/helm-charts/{{.CHART_NAME}} \
            --version {{.CHART_VERSION}} \
            --namespace default \
            --set image.tag={{.EFFECTIVE_IMAGE_TAG}} \
            --set image.repository={{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test \
            --set ingress.hosts[0].host={{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}} \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.hosts[0].paths[0].pathType=Prefix \
            --set ingress.tls[0].hosts[0]={{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}} \
            --set ingress.tls[0].secretName={{.REGISTRY_NAME}}-test-tls \
            --set env[0].name=CHART_NAME \
            --set env[0].value={{.CHART_NAME}} \
            --set env[1].name=CHART_VERSION \
            --set env[1].value={{.CHART_VERSION}} \
            --set env[2].name=HELM_RELEASE_NAME \
            --set env[2].value={{.RELEASE_NAME}} \
            --set env[3].name=IMAGE_TAG \
            --set env[3].value={{.EFFECTIVE_IMAGE_TAG}}
          
          echo "‚úÖ Demo app deployed from OCI chart at https://{{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}}"
        fi

  undeploy-demo-app:
    desc: Undeploy the demo-app release
    silent: true
    vars:
      RELEASE_NAME: "{{.REGISTRY_NAME}}-test"
    cmds:
      - echo "üîÑ Undeploying demo-app release..."
      - |
        if helm status {{.RELEASE_NAME}} -n default >/dev/null 2>&1; then
          echo "  ‚è≥ Uninstalling helm release '{{.RELEASE_NAME}}'..."
          helm uninstall {{.RELEASE_NAME}} -n default
          echo "  ‚úÖ Helm release '{{.RELEASE_NAME}}' uninstalled"
        else
          echo "‚ÑπÔ∏è Helm release '{{.RELEASE_NAME}}' is not installed"
        fi
      - echo "‚úÖ Demo app release undeployed"

  demo-app-workflow:
    desc: "Complete demo app workflow: build image, package chart, and deploy from OCI registry"
    cmds:
      - task: build-push-image
      - task: package-helm-chart
      - task: deploy-demo-app

  local-registry:
    desc: "Validates local registry by running the demo app workflow"
    cmds:
      - task: demo-app-workflow

  app:
    desc: Validates demo app deployed via Helm release from local registry
    silent: true
    vars:
      TEST_NAME: "{{.REGISTRY_NAME}}-test"
    cmds:
      - echo "üîÑ Validating demo application..."
      - sleep 5
      - echo -e "\nüåê Registry Test (https://{{.TEST_NAME}}.{{.LOCAL_DOMAIN}}/):\n"
      - curl -s https://{{.TEST_NAME}}.{{.LOCAL_DOMAIN}}/
      - echo "‚úÖ Demo application validation complete"

  tcp-services-external:
    desc: "Validate TCP services are reachable from the local machine"
    silent: true
    cmds:
      - |
        echo "üîç Checking for enabled TCP services..."
        if [ $(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}} | wc -l) -eq 0 ]; then
          echo "‚ÑπÔ∏è  No TCP services are enabled. Skipping external validation."
          exit 0
        fi
        
        echo "üîç Validating enabled TCP services from the local machine:"
        FAILED=0
        ENABLED_SERVICES=($(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}}))
        for service in "${ENABLED_SERVICES[@]}"; do
          ports=($(yq e ".environment.services[] | select(.name == \"$service\") | .ports[]" {{.CONFIG_FILE}}))
          for port in "${ports[@]}"; do
            echo "  üîÑ Validating $service on port $port..."
            if nc -zv $service.{{.LOCAL_DOMAIN}} $port -w 5 2>&1 | grep -qE 'open|succeeded|Connected'; then
              echo "  ‚úÖ $service.{{.LOCAL_DOMAIN}} is reachable on port $port"
            else
              echo "  ‚ùå $service.{{.LOCAL_DOMAIN}} is NOT reachable on port $port"
              FAILED=1
            fi
          done
        done
        
        if [ $FAILED -eq 1 ]; then
          echo "‚ùå Some services are not reachable from the local machine"
          exit 1
        fi
        echo "‚úÖ All services are reachable from the local machine"

  tcp-services-internal:
    desc: "Validate TCP services are reachable from inside the cluster"
    silent: true
    cmds:
      - |
        echo "üîç Checking for enabled TCP services..."
        if [ $(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}} | wc -l) -eq 0 ]; then
          echo "‚ÑπÔ∏è  No TCP services are enabled. Skipping internal validation."
          exit 0
        fi
        
        echo "üîç Validating enabled TCP services from inside the cluster:"
        # Create temporary pod for testing
        cat << EOF | kubectl apply -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: netcat-internal-test
          namespace: default
        spec:
          containers:
          - name: netcat
            image: busybox
            command: ["sleep", "300"]
          restartPolicy: Never
        EOF
        
        # Wait for pod to be ready
        echo "  ‚è≥ Waiting for test pod to be ready..."
        kubectl wait --for=condition=ready pod/netcat-internal-test -n default --timeout=180s
        
        # Test each service
        FAILED=0
        ENABLED_SERVICES=($(yq e '.environment.services[] | select(.enabled == true) | .name' {{.CONFIG_FILE}}))
        for service in "${ENABLED_SERVICES[@]}"; do
          ports=($(yq e ".environment.services[] | select(.name == \"$service\") | .ports[]" {{.CONFIG_FILE}}))
          for port in "${ports[@]}"; do
            echo "  üîÑ Validating $service on port $port..."
            if kubectl exec -n default netcat-internal-test -- nc -zv $service.{{.LOCAL_DOMAIN}} $port -w 5 2>&1 | grep -qE 'open|succeeded|Connected'; then
              echo "  ‚úÖ $service.{{.LOCAL_DOMAIN}} is reachable on port $port"
            else
              echo "  ‚ùå $service.{{.LOCAL_DOMAIN}} is NOT reachable on port $port"
              FAILED=1
            fi
          done
        done
        
        # Clean up
        kubectl delete pod netcat-internal-test -n default --force --grace-period=0
        
        if [ $FAILED -eq 1 ]; then
          echo "‚ùå Some services are not reachable from inside the cluster"
          exit 1
        fi
        echo "‚úÖ All services are reachable from inside the cluster"

  tcp-services:
    desc: "Validate TCP services are reachable both from the local machine and from inside the cluster"
    silent: true
    cmds:
      - task: tcp-services-external
      - task: tcp-services-internal

  demo-app:
    desc: Validate the demo app (alias for app task)
    silent: true
    cmds:
      - task: app

  print-urls:
    desc: Print URLs for deployed test applications
    silent: true
    cmds:
      - |
        echo "üåê Deployed Test Application URLs:"
        echo ""
        
        # Check if demo app deployment exists
        if helm status {{.REGISTRY_NAME}}-test -n default >/dev/null 2>&1; then
          echo "üì¶ Demo App OCI Helm Deployment:"
          echo "   https://{{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}}/"
          echo ""
        else
          echo "‚ÑπÔ∏è  Demo App deployment not found ({{.REGISTRY_NAME}}-test)"
          echo ""
        fi

  test-helm-chart:
    desc: Test the Helm chart templates and lint
    silent: true
    cmds:
      - echo "üîÑ Testing Helm chart..."
      - |
        echo "  üîç Linting Helm chart..."
        helm lint {{.REG_TEST_DIR}}/helm-chart
        
        echo "  üìã Testing template rendering..."
        helm template demo-app {{.REG_TEST_DIR}}/helm-chart \
          --set image.tag={{.CR_TEST_IMAGE_TAG}} \
          --set image.repository={{.REGISTRY_HOST}}/{{.REGISTRY_NAME}}-test \
          --set ingress.hosts[0].host={{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}} \
          --set ingress.tls[0].hosts[0]={{.REGISTRY_NAME}}-test.{{.LOCAL_DOMAIN}} \
          --dry-run > {{.K8S_DIR}}/config/demo-app-rendered.yaml
        
        echo "  ‚úÖ Chart templates rendered successfully"
        echo "  üìÑ Rendered templates saved to {{.K8S_DIR}}/config/demo-app-rendered.yaml"
      - echo "‚úÖ Helm chart testing complete"
